# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libm2k')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libm2k')
    _libm2k = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libm2k', [dirname(__file__)])
        except ImportError:
            import _libm2k
            return _libm2k
        try:
            _mod = imp.load_module('_libm2k', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libm2k = swig_import_helper()
    del swig_import_helper
else:
    import _libm2k
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SWIG_ON = _libm2k.SWIG_ON
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libm2k.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libm2k.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libm2k.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libm2k.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libm2k.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libm2k.SwigPyIterator_copy(self)

    def next(self):
        return _libm2k.SwigPyIterator_next(self)

    def __next__(self):
        return _libm2k.SwigPyIterator___next__(self)

    def previous(self):
        return _libm2k.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libm2k.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libm2k.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libm2k.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libm2k.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libm2k.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libm2k.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libm2k.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libm2k.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorI(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorI, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorI self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorI self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorI self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI___bool__(self)


    def __len__(self):
        """
        __len__(VectorI self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> VectorI

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _libm2k.VectorI___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(VectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, VectorI v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _libm2k.VectorI___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _libm2k.VectorI___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorI self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(VectorI self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorI___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorI self, PySliceObject * slice) -> VectorI

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorI self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _libm2k.VectorI___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorI self, PySliceObject * slice, VectorI v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(VectorI self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorI self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorI self) -> std::vector< int >::value_type

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_pop(self)


    def append(self, x):
        """
        append(VectorI self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI_append(self, x)


    def empty(self):
        """
        empty(VectorI self) -> bool

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_empty(self)


    def size(self):
        """
        size(VectorI self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_size(self)


    def swap(self, v):
        """
        swap(VectorI self, VectorI v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _libm2k.VectorI_swap(self, v)


    def begin(self):
        """
        begin(VectorI self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_begin(self)


    def end(self):
        """
        end(VectorI self) -> std::vector< int >::iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_end(self)


    def rbegin(self):
        """
        rbegin(VectorI self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_rbegin(self)


    def rend(self):
        """
        rend(VectorI self) -> std::vector< int >::reverse_iterator

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_rend(self)


    def clear(self):
        """
        clear(VectorI self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorI self) -> std::vector< int >::allocator_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorI self)

        Parameters
        ----------
        self: std::vector< int > *

        """
        return _libm2k.VectorI_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorI self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(VectorI self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _libm2k.VectorI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> VectorI
        __init__(std::vector<(int)> self, VectorI arg2) -> VectorI

        Parameters
        ----------
        arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> VectorI

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> VectorI

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        this = _libm2k.new_VectorI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorI self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI_push_back(self, x)


    def front(self):
        """
        front(VectorI self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_front(self)


    def back(self):
        """
        back(VectorI self) -> std::vector< int >::value_type const &

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_back(self)


    def assign(self, n, x):
        """
        assign(VectorI self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorI self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(VectorI self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorI self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(VectorI self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _libm2k.VectorI_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorI self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _libm2k.VectorI_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorI self) -> std::vector< int >::size_type

        Parameters
        ----------
        self: std::vector< int > const *

        """
        return _libm2k.VectorI_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorI
    __del__ = lambda self: None
VectorI_swigregister = _libm2k.VectorI_swigregister
VectorI_swigregister(VectorI)

class VectorS(_object):
    """Proxy of C++ std::vector<(short)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorS, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorS self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorS self) -> bool

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorS self) -> bool

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS___bool__(self)


    def __len__(self):
        """
        __len__(VectorS self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> VectorS

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _libm2k.VectorS___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        __setslice__(VectorS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, VectorS v)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type
        v: std::vector< short,std::allocator< short > > const &

        """
        return _libm2k.VectorS___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _libm2k.VectorS___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorS self, std::vector< short >::difference_type i)

        Parameters
        ----------
        i: std::vector< short >::difference_type

        __delitem__(VectorS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorS___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorS self, PySliceObject * slice) -> VectorS

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorS self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &

        Parameters
        ----------
        i: std::vector< short >::difference_type

        """
        return _libm2k.VectorS___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorS self, PySliceObject * slice, VectorS v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< short,std::allocator< short > > const &

        __setitem__(VectorS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorS self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorS self) -> std::vector< short >::value_type

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_pop(self)


    def append(self, x):
        """
        append(VectorS self, std::vector< short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS_append(self, x)


    def empty(self):
        """
        empty(VectorS self) -> bool

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_empty(self)


    def size(self):
        """
        size(VectorS self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_size(self)


    def swap(self, v):
        """
        swap(VectorS self, VectorS v)

        Parameters
        ----------
        v: std::vector< short > &

        """
        return _libm2k.VectorS_swap(self, v)


    def begin(self):
        """
        begin(VectorS self) -> std::vector< short >::iterator

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_begin(self)


    def end(self):
        """
        end(VectorS self) -> std::vector< short >::iterator

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_end(self)


    def rbegin(self):
        """
        rbegin(VectorS self) -> std::vector< short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_rbegin(self)


    def rend(self):
        """
        rend(VectorS self) -> std::vector< short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_rend(self)


    def clear(self):
        """
        clear(VectorS self)

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorS self) -> std::vector< short >::allocator_type

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorS self)

        Parameters
        ----------
        self: std::vector< short > *

        """
        return _libm2k.VectorS_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorS self, std::vector< short >::iterator pos) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator

        erase(VectorS self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator

        Parameters
        ----------
        first: std::vector< short >::iterator
        last: std::vector< short >::iterator

        """
        return _libm2k.VectorS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(short)> self) -> VectorS
        __init__(std::vector<(short)> self, VectorS arg2) -> VectorS

        Parameters
        ----------
        arg2: std::vector< short > const &

        __init__(std::vector<(short)> self, std::vector< short >::size_type size) -> VectorS

        Parameters
        ----------
        size: std::vector< short >::size_type

        __init__(std::vector<(short)> self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> VectorS

        Parameters
        ----------
        size: std::vector< short >::size_type
        value: std::vector< short >::value_type const &

        """
        this = _libm2k.new_VectorS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorS self, std::vector< short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS_push_back(self, x)


    def front(self):
        """
        front(VectorS self) -> std::vector< short >::value_type const &

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_front(self)


    def back(self):
        """
        back(VectorS self) -> std::vector< short >::value_type const &

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_back(self)


    def assign(self, n, x):
        """
        assign(VectorS self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)

        Parameters
        ----------
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorS self, std::vector< short >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< short >::size_type

        resize(VectorS self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorS self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator
        x: std::vector< short >::value_type const &

        insert(VectorS self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< short >::iterator
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _libm2k.VectorS_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorS self, std::vector< short >::size_type n)

        Parameters
        ----------
        n: std::vector< short >::size_type

        """
        return _libm2k.VectorS_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorS self) -> std::vector< short >::size_type

        Parameters
        ----------
        self: std::vector< short > const *

        """
        return _libm2k.VectorS_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorS
    __del__ = lambda self: None
VectorS_swigregister = _libm2k.VectorS_swigregister
VectorS_swigregister(VectorS)

class VectorUS(_object):
    """Proxy of C++ std::vector<(unsigned short)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUS, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorUS self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS___bool__(self)


    def __len__(self):
        """
        __len__(VectorUS self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j) -> VectorUS

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        """
        return _libm2k.VectorUS___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        __setslice__(VectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j, VectorUS v)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type
        v: std::vector< unsigned short,std::allocator< unsigned short > > const &

        """
        return _libm2k.VectorUS___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        j: std::vector< unsigned short >::difference_type

        """
        return _libm2k.VectorUS___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorUS self, std::vector< unsigned short >::difference_type i)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type

        __delitem__(VectorUS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorUS___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorUS self, PySliceObject * slice) -> VectorUS

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorUS self, std::vector< unsigned short >::difference_type i) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type

        """
        return _libm2k.VectorUS___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorUS self, PySliceObject * slice, VectorUS v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< unsigned short,std::allocator< unsigned short > > const &

        __setitem__(VectorUS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        i: std::vector< unsigned short >::difference_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorUS self) -> std::vector< unsigned short >::value_type

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_pop(self)


    def append(self, x):
        """
        append(VectorUS self, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS_append(self, x)


    def empty(self):
        """
        empty(VectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_empty(self)


    def size(self):
        """
        size(VectorUS self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_size(self)


    def swap(self, v):
        """
        swap(VectorUS self, VectorUS v)

        Parameters
        ----------
        v: std::vector< unsigned short > &

        """
        return _libm2k.VectorUS_swap(self, v)


    def begin(self):
        """
        begin(VectorUS self) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_begin(self)


    def end(self):
        """
        end(VectorUS self) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_end(self)


    def rbegin(self):
        """
        rbegin(VectorUS self) -> std::vector< unsigned short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_rbegin(self)


    def rend(self):
        """
        rend(VectorUS self) -> std::vector< unsigned short >::reverse_iterator

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_rend(self)


    def clear(self):
        """
        clear(VectorUS self)

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorUS self) -> std::vector< unsigned short >::allocator_type

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorUS self)

        Parameters
        ----------
        self: std::vector< unsigned short > *

        """
        return _libm2k.VectorUS_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorUS self, std::vector< unsigned short >::iterator pos) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator

        erase(VectorUS self, std::vector< unsigned short >::iterator first, std::vector< unsigned short >::iterator last) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        first: std::vector< unsigned short >::iterator
        last: std::vector< unsigned short >::iterator

        """
        return _libm2k.VectorUS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned short)> self) -> VectorUS
        __init__(std::vector<(unsigned short)> self, VectorUS arg2) -> VectorUS

        Parameters
        ----------
        arg2: std::vector< unsigned short > const &

        __init__(std::vector<(unsigned short)> self, std::vector< unsigned short >::size_type size) -> VectorUS

        Parameters
        ----------
        size: std::vector< unsigned short >::size_type

        __init__(std::vector<(unsigned short)> self, std::vector< unsigned short >::size_type size, std::vector< unsigned short >::value_type const & value) -> VectorUS

        Parameters
        ----------
        size: std::vector< unsigned short >::size_type
        value: std::vector< unsigned short >::value_type const &

        """
        this = _libm2k.new_VectorUS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorUS self, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS_push_back(self, x)


    def front(self):
        """
        front(VectorUS self) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_front(self)


    def back(self):
        """
        back(VectorUS self) -> std::vector< unsigned short >::value_type const &

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_back(self)


    def assign(self, n, x):
        """
        assign(VectorUS self, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        n: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorUS self, std::vector< unsigned short >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned short >::size_type

        resize(VectorUS self, std::vector< unsigned short >::size_type new_size, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorUS self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::value_type const & x) -> std::vector< unsigned short >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator
        x: std::vector< unsigned short >::value_type const &

        insert(VectorUS self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< unsigned short >::iterator
        n: std::vector< unsigned short >::size_type
        x: std::vector< unsigned short >::value_type const &

        """
        return _libm2k.VectorUS_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorUS self, std::vector< unsigned short >::size_type n)

        Parameters
        ----------
        n: std::vector< unsigned short >::size_type

        """
        return _libm2k.VectorUS_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorUS self) -> std::vector< unsigned short >::size_type

        Parameters
        ----------
        self: std::vector< unsigned short > const *

        """
        return _libm2k.VectorUS_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorUS
    __del__ = lambda self: None
VectorUS_swigregister = _libm2k.VectorUS_swigregister
VectorUS_swigregister(VectorUS)

class VectorD(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorD, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorD self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorD self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorD self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD___bool__(self)


    def __len__(self):
        """
        __len__(VectorD self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> VectorD

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _libm2k.VectorD___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(VectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, VectorD v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _libm2k.VectorD___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _libm2k.VectorD___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorD self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(VectorD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorD___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorD self, PySliceObject * slice) -> VectorD

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorD self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _libm2k.VectorD___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorD self, PySliceObject * slice, VectorD v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(VectorD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorD self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorD self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_pop(self)


    def append(self, x):
        """
        append(VectorD self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD_append(self, x)


    def empty(self):
        """
        empty(VectorD self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_empty(self)


    def size(self):
        """
        size(VectorD self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_size(self)


    def swap(self, v):
        """
        swap(VectorD self, VectorD v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _libm2k.VectorD_swap(self, v)


    def begin(self):
        """
        begin(VectorD self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_begin(self)


    def end(self):
        """
        end(VectorD self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_end(self)


    def rbegin(self):
        """
        rbegin(VectorD self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_rbegin(self)


    def rend(self):
        """
        rend(VectorD self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_rend(self)


    def clear(self):
        """
        clear(VectorD self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorD self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorD self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _libm2k.VectorD_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorD self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(VectorD self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _libm2k.VectorD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> VectorD
        __init__(std::vector<(double)> self, VectorD arg2) -> VectorD

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> VectorD

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> VectorD

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _libm2k.new_VectorD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorD self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD_push_back(self, x)


    def front(self):
        """
        front(VectorD self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_front(self)


    def back(self):
        """
        back(VectorD self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_back(self)


    def assign(self, n, x):
        """
        assign(VectorD self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorD self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(VectorD self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorD self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(VectorD self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _libm2k.VectorD_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorD self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _libm2k.VectorD_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorD self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _libm2k.VectorD_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorD
    __del__ = lambda self: None
VectorD_swigregister = _libm2k.VectorD_swigregister
VectorD_swigregister(VectorD)

class VectorStr(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorStr, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorStr self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorStr self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorStr self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr___bool__(self)


    def __len__(self):
        """
        __len__(VectorStr self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorStr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorStr

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _libm2k.VectorStr___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorStr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(VectorStr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorStr v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _libm2k.VectorStr___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorStr self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _libm2k.VectorStr___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorStr self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(VectorStr self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorStr___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorStr self, PySliceObject * slice) -> VectorStr

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorStr self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _libm2k.VectorStr___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorStr self, PySliceObject * slice, VectorStr v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(VectorStr self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorStr self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorStr self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_pop(self)


    def append(self, x):
        """
        append(VectorStr self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr_append(self, x)


    def empty(self):
        """
        empty(VectorStr self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_empty(self)


    def size(self):
        """
        size(VectorStr self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_size(self)


    def swap(self, v):
        """
        swap(VectorStr self, VectorStr v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _libm2k.VectorStr_swap(self, v)


    def begin(self):
        """
        begin(VectorStr self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_begin(self)


    def end(self):
        """
        end(VectorStr self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_end(self)


    def rbegin(self):
        """
        rbegin(VectorStr self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_rbegin(self)


    def rend(self):
        """
        rend(VectorStr self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_rend(self)


    def clear(self):
        """
        clear(VectorStr self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorStr self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorStr self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _libm2k.VectorStr_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorStr self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(VectorStr self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _libm2k.VectorStr_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> VectorStr
        __init__(std::vector<(std::string)> self, VectorStr arg2) -> VectorStr

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> VectorStr

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorStr

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _libm2k.new_VectorStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorStr self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr_push_back(self, x)


    def front(self):
        """
        front(VectorStr self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_front(self)


    def back(self):
        """
        back(VectorStr self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_back(self)


    def assign(self, n, x):
        """
        assign(VectorStr self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorStr self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(VectorStr self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorStr self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(VectorStr self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _libm2k.VectorStr_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorStr self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _libm2k.VectorStr_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorStr self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _libm2k.VectorStr_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorStr
    __del__ = lambda self: None
VectorStr_swigregister = _libm2k.VectorStr_swigregister
VectorStr_swigregister(VectorStr)

class VectorVectorD(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorD, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorVectorD self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorVectorD self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorVectorD self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD___bool__(self)


    def __len__(self):
        """
        __len__(VectorVectorD self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> VectorVectorD

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _libm2k.VectorVectorD___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, VectorVectorD v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _libm2k.VectorVectorD___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _libm2k.VectorVectorD___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(VectorVectorD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorVectorD___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorVectorD self, PySliceObject * slice) -> VectorVectorD

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i) -> VectorD

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _libm2k.VectorVectorD___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorVectorD self, PySliceObject * slice, VectorVectorD v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(VectorVectorD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorVectorD self, std::vector< std::vector< double > >::difference_type i, VectorD x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorVectorD self) -> VectorD

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_pop(self)


    def append(self, x):
        """
        append(VectorVectorD self, VectorD x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD_append(self, x)


    def empty(self):
        """
        empty(VectorVectorD self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_empty(self)


    def size(self):
        """
        size(VectorVectorD self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_size(self)


    def swap(self, v):
        """
        swap(VectorVectorD self, VectorVectorD v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _libm2k.VectorVectorD_swap(self, v)


    def begin(self):
        """
        begin(VectorVectorD self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_begin(self)


    def end(self):
        """
        end(VectorVectorD self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_end(self)


    def rbegin(self):
        """
        rbegin(VectorVectorD self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_rbegin(self)


    def rend(self):
        """
        rend(VectorVectorD self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_rend(self)


    def clear(self):
        """
        clear(VectorVectorD self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorVectorD self) -> std::vector< std::vector< double > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorVectorD self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _libm2k.VectorVectorD_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorVectorD self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(VectorVectorD self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _libm2k.VectorVectorD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> VectorVectorD
        __init__(std::vector<(std::vector<(double)>)> self, VectorVectorD arg2) -> VectorVectorD

        Parameters
        ----------
        arg2: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> VectorVectorD

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, VectorD value) -> VectorVectorD

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        this = _libm2k.new_VectorVectorD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorVectorD self, VectorD x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD_push_back(self, x)


    def front(self):
        """
        front(VectorVectorD self) -> VectorD

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_front(self)


    def back(self):
        """
        back(VectorVectorD self) -> VectorD

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_back(self)


    def assign(self, n, x):
        """
        assign(VectorVectorD self, std::vector< std::vector< double > >::size_type n, VectorD x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorVectorD self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(VectorVectorD self, std::vector< std::vector< double > >::size_type new_size, VectorD x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorVectorD self, std::vector< std::vector< double > >::iterator pos, VectorD x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(VectorVectorD self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, VectorD x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _libm2k.VectorVectorD_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorVectorD self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _libm2k.VectorVectorD_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorVectorD self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _libm2k.VectorVectorD_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorVectorD
    __del__ = lambda self: None
VectorVectorD_swigregister = _libm2k.VectorVectorD_swigregister
VectorVectorD_swigregister(VectorVectorD)

class VectorVectorS(_object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorS, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorVectorS self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorVectorS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorVectorS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS___bool__(self)


    def __len__(self):
        """
        __len__(VectorVectorS self) -> std::vector< std::vector< int > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> VectorVectorS

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        """
        return _libm2k.VectorVectorS___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        __setslice__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, VectorVectorS v)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type
        v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        """
        return _libm2k.VectorVectorS___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        """
        return _libm2k.VectorVectorS___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type

        __delitem__(VectorVectorS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorVectorS___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorVectorS self, PySliceObject * slice) -> VectorVectorS

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i) -> VectorI

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type

        """
        return _libm2k.VectorVectorS___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorVectorS self, PySliceObject * slice, VectorVectorS v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        __setitem__(VectorVectorS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorVectorS self, std::vector< std::vector< int > >::difference_type i, VectorI x)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorVectorS self) -> VectorI

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_pop(self)


    def append(self, x):
        """
        append(VectorVectorS self, VectorI x)

        Parameters
        ----------
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS_append(self, x)


    def empty(self):
        """
        empty(VectorVectorS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_empty(self)


    def size(self):
        """
        size(VectorVectorS self) -> std::vector< std::vector< int > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_size(self)


    def swap(self, v):
        """
        swap(VectorVectorS self, VectorVectorS v)

        Parameters
        ----------
        v: std::vector< std::vector< int,std::allocator< int > > > &

        """
        return _libm2k.VectorVectorS_swap(self, v)


    def begin(self):
        """
        begin(VectorVectorS self) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_begin(self)


    def end(self):
        """
        end(VectorVectorS self) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_end(self)


    def rbegin(self):
        """
        rbegin(VectorVectorS self) -> std::vector< std::vector< int > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_rbegin(self)


    def rend(self):
        """
        rend(VectorVectorS self) -> std::vector< std::vector< int > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_rend(self)


    def clear(self):
        """
        clear(VectorVectorS self)

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorVectorS self) -> std::vector< std::vector< int > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorVectorS self)

        Parameters
        ----------
        self: std::vector< std::vector< int > > *

        """
        return _libm2k.VectorVectorS_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorVectorS self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator

        erase(VectorVectorS self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< int > >::iterator
        last: std::vector< std::vector< int > >::iterator

        """
        return _libm2k.VectorVectorS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(int)>)> self) -> VectorVectorS
        __init__(std::vector<(std::vector<(int)>)> self, VectorVectorS arg2) -> VectorVectorS

        Parameters
        ----------
        arg2: std::vector< std::vector< int,std::allocator< int > > > const &

        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size) -> VectorVectorS

        Parameters
        ----------
        size: std::vector< std::vector< int > >::size_type

        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size, VectorI value) -> VectorVectorS

        Parameters
        ----------
        size: std::vector< std::vector< int > >::size_type
        value: std::vector< std::vector< int > >::value_type const &

        """
        this = _libm2k.new_VectorVectorS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorVectorS self, VectorI x)

        Parameters
        ----------
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS_push_back(self, x)


    def front(self):
        """
        front(VectorVectorS self) -> VectorI

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_front(self)


    def back(self):
        """
        back(VectorVectorS self) -> VectorI

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_back(self)


    def assign(self, n, x):
        """
        assign(VectorVectorS self, std::vector< std::vector< int > >::size_type n, VectorI x)

        Parameters
        ----------
        n: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorVectorS self, std::vector< std::vector< int > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< int > >::size_type

        resize(VectorVectorS self, std::vector< std::vector< int > >::size_type new_size, VectorI x)

        Parameters
        ----------
        new_size: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorVectorS self, std::vector< std::vector< int > >::iterator pos, VectorI x) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator
        x: std::vector< std::vector< int > >::value_type const &

        insert(VectorVectorS self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, VectorI x)

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator
        n: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _libm2k.VectorVectorS_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorVectorS self, std::vector< std::vector< int > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< int > >::size_type

        """
        return _libm2k.VectorVectorS_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorVectorS self) -> std::vector< std::vector< int > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< int > > const *

        """
        return _libm2k.VectorVectorS_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorVectorS
    __del__ = lambda self: None
VectorVectorS_swigregister = _libm2k.VectorVectorS_swigregister
VectorVectorS_swigregister(VectorVectorS)

class VectorVectorUS(_object):
    """Proxy of C++ std::vector<(std::vector<(unsigned short)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorUS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorUS, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorVectorUS self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorVectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorVectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS___bool__(self)


    def __len__(self):
        """
        __len__(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j) -> VectorVectorUS

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type
        j: std::vector< std::vector< unsigned short > >::difference_type

        """
        return _libm2k.VectorVectorUS___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type
        j: std::vector< std::vector< unsigned short > >::difference_type

        __setslice__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j, VectorVectorUS v)

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type
        j: std::vector< std::vector< unsigned short > >::difference_type
        v: std::vector< std::vector< unsigned short,std::allocator< unsigned short > >,std::allocator< std::vector< unsigned short,std::allocator< unsigned short > > > > const &

        """
        return _libm2k.VectorVectorUS___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type
        j: std::vector< std::vector< unsigned short > >::difference_type

        """
        return _libm2k.VectorVectorUS___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type

        __delitem__(VectorVectorUS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorVectorUS___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorVectorUS self, PySliceObject * slice) -> VectorVectorUS

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i) -> VectorUS

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type

        """
        return _libm2k.VectorVectorUS___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorVectorUS self, PySliceObject * slice, VectorVectorUS v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< unsigned short,std::allocator< unsigned short > >,std::allocator< std::vector< unsigned short,std::allocator< unsigned short > > > > const &

        __setitem__(VectorVectorUS self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorVectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, VectorUS x)

        Parameters
        ----------
        i: std::vector< std::vector< unsigned short > >::difference_type
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorVectorUS self) -> VectorUS

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_pop(self)


    def append(self, x):
        """
        append(VectorVectorUS self, VectorUS x)

        Parameters
        ----------
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS_append(self, x)


    def empty(self):
        """
        empty(VectorVectorUS self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_empty(self)


    def size(self):
        """
        size(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_size(self)


    def swap(self, v):
        """
        swap(VectorVectorUS self, VectorVectorUS v)

        Parameters
        ----------
        v: std::vector< std::vector< unsigned short,std::allocator< unsigned short > > > &

        """
        return _libm2k.VectorVectorUS_swap(self, v)


    def begin(self):
        """
        begin(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_begin(self)


    def end(self):
        """
        end(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_end(self)


    def rbegin(self):
        """
        rbegin(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_rbegin(self)


    def rend(self):
        """
        rend(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_rend(self)


    def clear(self):
        """
        clear(VectorVectorUS self)

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorVectorUS self)

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > *

        """
        return _libm2k.VectorVectorUS_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorVectorUS self, std::vector< std::vector< unsigned short > >::iterator pos) -> std::vector< std::vector< unsigned short > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< unsigned short > >::iterator

        erase(VectorVectorUS self, std::vector< std::vector< unsigned short > >::iterator first, std::vector< std::vector< unsigned short > >::iterator last) -> std::vector< std::vector< unsigned short > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< unsigned short > >::iterator
        last: std::vector< std::vector< unsigned short > >::iterator

        """
        return _libm2k.VectorVectorUS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(unsigned short)>)> self) -> VectorVectorUS
        __init__(std::vector<(std::vector<(unsigned short)>)> self, VectorVectorUS arg2) -> VectorVectorUS

        Parameters
        ----------
        arg2: std::vector< std::vector< unsigned short,std::allocator< unsigned short > > > const &

        __init__(std::vector<(std::vector<(unsigned short)>)> self, std::vector< std::vector< unsigned short > >::size_type size) -> VectorVectorUS

        Parameters
        ----------
        size: std::vector< std::vector< unsigned short > >::size_type

        __init__(std::vector<(std::vector<(unsigned short)>)> self, std::vector< std::vector< unsigned short > >::size_type size, VectorUS value) -> VectorVectorUS

        Parameters
        ----------
        size: std::vector< std::vector< unsigned short > >::size_type
        value: std::vector< std::vector< unsigned short > >::value_type const &

        """
        this = _libm2k.new_VectorVectorUS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorVectorUS self, VectorUS x)

        Parameters
        ----------
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS_push_back(self, x)


    def front(self):
        """
        front(VectorVectorUS self) -> VectorUS

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_front(self)


    def back(self):
        """
        back(VectorVectorUS self) -> VectorUS

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_back(self)


    def assign(self, n, x):
        """
        assign(VectorVectorUS self, std::vector< std::vector< unsigned short > >::size_type n, VectorUS x)

        Parameters
        ----------
        n: std::vector< std::vector< unsigned short > >::size_type
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorVectorUS self, std::vector< std::vector< unsigned short > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< unsigned short > >::size_type

        resize(VectorVectorUS self, std::vector< std::vector< unsigned short > >::size_type new_size, VectorUS x)

        Parameters
        ----------
        new_size: std::vector< std::vector< unsigned short > >::size_type
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorVectorUS self, std::vector< std::vector< unsigned short > >::iterator pos, VectorUS x) -> std::vector< std::vector< unsigned short > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< unsigned short > >::iterator
        x: std::vector< std::vector< unsigned short > >::value_type const &

        insert(VectorVectorUS self, std::vector< std::vector< unsigned short > >::iterator pos, std::vector< std::vector< unsigned short > >::size_type n, VectorUS x)

        Parameters
        ----------
        pos: std::vector< std::vector< unsigned short > >::iterator
        n: std::vector< std::vector< unsigned short > >::size_type
        x: std::vector< std::vector< unsigned short > >::value_type const &

        """
        return _libm2k.VectorVectorUS_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorVectorUS self, std::vector< std::vector< unsigned short > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< unsigned short > >::size_type

        """
        return _libm2k.VectorVectorUS_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorVectorUS self) -> std::vector< std::vector< unsigned short > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< unsigned short > > const *

        """
        return _libm2k.VectorVectorUS_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorVectorUS
    __del__ = lambda self: None
VectorVectorUS_swigregister = _libm2k.VectorVectorUS_swigregister
VectorVectorUS_swigregister(VectorVectorUS)

class PairDD(_object):
    """Proxy of C++ std::pair<(double,double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDD, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(double,double)> self) -> PairDD
        __init__(std::pair<(double,double)> self, double first, double second) -> PairDD

        Parameters
        ----------
        first: double
        second: double

        __init__(std::pair<(double,double)> self, PairDD p) -> PairDD

        Parameters
        ----------
        p: std::pair< double,double > const &

        """
        this = _libm2k.new_PairDD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _libm2k.PairDD_first_set
    __swig_getmethods__["first"] = _libm2k.PairDD_first_get
    if _newclass:
        first = _swig_property(_libm2k.PairDD_first_get, _libm2k.PairDD_first_set)
    __swig_setmethods__["second"] = _libm2k.PairDD_second_set
    __swig_getmethods__["second"] = _libm2k.PairDD_second_get
    if _newclass:
        second = _swig_property(_libm2k.PairDD_second_get, _libm2k.PairDD_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libm2k.delete_PairDD
    __del__ = lambda self: None
PairDD_swigregister = _libm2k.PairDD_swigregister
PairDD_swigregister(PairDD)

class VectorPairDD(_object):
    """Proxy of C++ std::vector<(std::pair<(std::string,std::pair<(double,double)>)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPairDD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPairDD, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(VectorPairDD self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(VectorPairDD self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD___nonzero__(self)


    def __bool__(self):
        """
        __bool__(VectorPairDD self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD___bool__(self)


    def __len__(self):
        """
        __len__(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type j) -> VectorPairDD

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        j: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type

        """
        return _libm2k.VectorPairDD___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        j: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type

        __setslice__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type j, VectorPairDD v)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        j: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        v: std::vector< std::pair< std::string,std::pair< double,double > >,std::allocator< std::pair< std::string,std::pair< double,double > > > > const &

        """
        return _libm2k.VectorPairDD___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        j: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type

        """
        return _libm2k.VectorPairDD___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type

        __delitem__(VectorPairDD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.VectorPairDD___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorPairDD self, PySliceObject * slice) -> VectorPairDD

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i) -> std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type

        """
        return _libm2k.VectorPairDD___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorPairDD self, PySliceObject * slice, VectorPairDD v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::pair< std::string,std::pair< double,double > >,std::allocator< std::pair< std::string,std::pair< double,double > > > > const &

        __setitem__(VectorPairDD self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type i, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::pair< std::string,std::pair< double,double > > >::difference_type
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD___setitem__(self, *args)


    def pop(self):
        """
        pop(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::value_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_pop(self)


    def append(self, x):
        """
        append(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD_append(self, x)


    def empty(self):
        """
        empty(VectorPairDD self) -> bool

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_empty(self)


    def size(self):
        """
        size(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_size(self)


    def swap(self, v):
        """
        swap(VectorPairDD self, VectorPairDD v)

        Parameters
        ----------
        v: std::vector< std::pair< std::string,std::pair< double,double > > > &

        """
        return _libm2k.VectorPairDD_swap(self, v)


    def begin(self):
        """
        begin(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_begin(self)


    def end(self):
        """
        end(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_end(self)


    def rbegin(self):
        """
        rbegin(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_rbegin(self)


    def rend(self):
        """
        rend(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_rend(self)


    def clear(self):
        """
        clear(VectorPairDD self)

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_clear(self)


    def get_allocator(self):
        """
        get_allocator(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_get_allocator(self)


    def pop_back(self):
        """
        pop_back(VectorPairDD self)

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > *

        """
        return _libm2k.VectorPairDD_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::iterator pos) -> std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        erase(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::iterator first, std::vector< std::pair< std::string,std::pair< double,double > > >::iterator last) -> std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        Parameters
        ----------
        first: std::vector< std::pair< std::string,std::pair< double,double > > >::iterator
        last: std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        """
        return _libm2k.VectorPairDD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::pair<(std::string,std::pair<(double,double)>)>)> self) -> VectorPairDD
        __init__(std::vector<(std::pair<(std::string,std::pair<(double,double)>)>)> self, VectorPairDD arg2) -> VectorPairDD

        Parameters
        ----------
        arg2: std::vector< std::pair< std::string,std::pair< double,double > > > const &

        __init__(std::vector<(std::pair<(std::string,std::pair<(double,double)>)>)> self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type size) -> VectorPairDD

        Parameters
        ----------
        size: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        __init__(std::vector<(std::pair<(std::string,std::pair<(double,double)>)>)> self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type size, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & value) -> VectorPairDD

        Parameters
        ----------
        size: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type
        value: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        this = _libm2k.new_VectorPairDD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD_push_back(self, x)


    def front(self):
        """
        front(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_front(self)


    def back(self):
        """
        back(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_back(self)


    def assign(self, n, x):
        """
        assign(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type n, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        resize(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type new_size, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::iterator pos, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x) -> std::vector< std::pair< std::string,std::pair< double,double > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::pair< double,double > > >::iterator
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        insert(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::iterator pos, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type n, std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::pair< std::string,std::pair< double,double > > >::iterator
        n: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type
        x: std::vector< std::pair< std::string,std::pair< double,double > > >::value_type const &

        """
        return _libm2k.VectorPairDD_insert(self, *args)


    def reserve(self, n):
        """
        reserve(VectorPairDD self, std::vector< std::pair< std::string,std::pair< double,double > > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        """
        return _libm2k.VectorPairDD_reserve(self, n)


    def capacity(self):
        """
        capacity(VectorPairDD self) -> std::vector< std::pair< std::string,std::pair< double,double > > >::size_type

        Parameters
        ----------
        self: std::vector< std::pair< std::string,std::pair< double,double > > > const *

        """
        return _libm2k.VectorPairDD_capacity(self)

    __swig_destroy__ = _libm2k.delete_VectorPairDD
    __del__ = lambda self: None
VectorPairDD_swigregister = _libm2k.VectorPairDD_swigregister
VectorPairDD_swigregister(VectorPairDD)

SHARED_PTR_DISOWN = _libm2k.SHARED_PTR_DISOWN
ADC_REF1 = _libm2k.ADC_REF1
ADC_REF2 = _libm2k.ADC_REF2
ADC_GND = _libm2k.ADC_GND
DAC = _libm2k.DAC
NONE = _libm2k.NONE
LOW_GAIN = _libm2k.LOW_GAIN
HIGH_GAIN = _libm2k.HIGH_GAIN
EXC_OUT_OF_RANGE = _libm2k.EXC_OUT_OF_RANGE
EXC_RUNTIME_ERROR = _libm2k.EXC_RUNTIME_ERROR
EXC_INVALID_PARAMETER = _libm2k.EXC_INVALID_PARAMETER
EXC_TIMEOUT = _libm2k.EXC_TIMEOUT
RISING_EDGE_ANALOG = _libm2k.RISING_EDGE_ANALOG
FALLING_EDGE_ANALOG = _libm2k.FALLING_EDGE_ANALOG
LOW_LEVEL_ANALOG = _libm2k.LOW_LEVEL_ANALOG
HIGH_LEVEL_ANALOG = _libm2k.HIGH_LEVEL_ANALOG
RISING_EDGE_DIGITAL = _libm2k.RISING_EDGE_DIGITAL
FALLING_EDGE_DIGITAL = _libm2k.FALLING_EDGE_DIGITAL
LOW_LEVEL_DIGITAL = _libm2k.LOW_LEVEL_DIGITAL
HIGH_LEVEL_DIGITAL = _libm2k.HIGH_LEVEL_DIGITAL
ANY_EDGE_DIGITAL = _libm2k.ANY_EDGE_DIGITAL
NO_TRIGGER_DIGITAL = _libm2k.NO_TRIGGER_DIGITAL
ALWAYS = _libm2k.ALWAYS
ANALOG = _libm2k.ANALOG
EXTERNAL = _libm2k.EXTERNAL
DIGITAL_OR_ANALOG = _libm2k.DIGITAL_OR_ANALOG
DIGITAL_AND_ANALOG = _libm2k.DIGITAL_AND_ANALOG
DIGITAL_XOR_ANALOG = _libm2k.DIGITAL_XOR_ANALOG
N_DIGITAL_OR_ANALOG = _libm2k.N_DIGITAL_OR_ANALOG
N_DIGITAL_AND_ANALOG = _libm2k.N_DIGITAL_AND_ANALOG
N_DIGITAL_XOR_ANALOG = _libm2k.N_DIGITAL_XOR_ANALOG
CHANNEL_1 = _libm2k.CHANNEL_1
CHANNEL_2 = _libm2k.CHANNEL_2
CHANNEL_1_OR_CHANNEL_2 = _libm2k.CHANNEL_1_OR_CHANNEL_2
CHANNEL_1_AND_CHANNEL_2 = _libm2k.CHANNEL_1_AND_CHANNEL_2
CHANNEL_1_XOR_CHANNEL_2 = _libm2k.CHANNEL_1_XOR_CHANNEL_2
SRC_DIGITAL_IN = _libm2k.SRC_DIGITAL_IN
CHANNEL_1_OR_SRC_LOGIC_ANALYZER = _libm2k.CHANNEL_1_OR_SRC_LOGIC_ANALYZER
CHANNEL_2_OR_SRC_LOGIC_ANALYZER = _libm2k.CHANNEL_2_OR_SRC_LOGIC_ANALYZER
CHANNEL_1_OR_CHANNEL_2_OR_SRC_LOGIC_ANALYZER = _libm2k.CHANNEL_1_OR_CHANNEL_2_OR_SRC_LOGIC_ANALYZER
SRC_TRIGGER_IN = _libm2k.SRC_TRIGGER_IN
SRC_ANALOG_IN = _libm2k.SRC_ANALOG_IN
SRC_NONE = _libm2k.SRC_NONE
SELECT_NONE = _libm2k.SELECT_NONE
SELECT_TRIGGER_I_SAME_CHAN = _libm2k.SELECT_TRIGGER_I_SAME_CHAN
SELECT_TRIGGER_IN = _libm2k.SELECT_TRIGGER_IN
SELECT_ANALOG_IN = _libm2k.SELECT_ANALOG_IN
SELECT_DIGITAL_IN = _libm2k.SELECT_DIGITAL_IN
class SETTINGS(_object):
    """Proxy of C++ libm2k::SETTINGS class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SETTINGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SETTINGS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["analog_condition"] = _libm2k.SETTINGS_analog_condition_set
    __swig_getmethods__["analog_condition"] = _libm2k.SETTINGS_analog_condition_get
    if _newclass:
        analog_condition = _swig_property(_libm2k.SETTINGS_analog_condition_get, _libm2k.SETTINGS_analog_condition_set)
    __swig_setmethods__["digital_condition"] = _libm2k.SETTINGS_digital_condition_set
    __swig_getmethods__["digital_condition"] = _libm2k.SETTINGS_digital_condition_get
    if _newclass:
        digital_condition = _swig_property(_libm2k.SETTINGS_digital_condition_get, _libm2k.SETTINGS_digital_condition_set)
    __swig_setmethods__["raw_level"] = _libm2k.SETTINGS_raw_level_set
    __swig_getmethods__["raw_level"] = _libm2k.SETTINGS_raw_level_get
    if _newclass:
        raw_level = _swig_property(_libm2k.SETTINGS_raw_level_get, _libm2k.SETTINGS_raw_level_set)
    __swig_setmethods__["level"] = _libm2k.SETTINGS_level_set
    __swig_getmethods__["level"] = _libm2k.SETTINGS_level_get
    if _newclass:
        level = _swig_property(_libm2k.SETTINGS_level_get, _libm2k.SETTINGS_level_set)
    __swig_setmethods__["hysteresis"] = _libm2k.SETTINGS_hysteresis_set
    __swig_getmethods__["hysteresis"] = _libm2k.SETTINGS_hysteresis_get
    if _newclass:
        hysteresis = _swig_property(_libm2k.SETTINGS_hysteresis_get, _libm2k.SETTINGS_hysteresis_set)
    __swig_setmethods__["mode"] = _libm2k.SETTINGS_mode_set
    __swig_getmethods__["mode"] = _libm2k.SETTINGS_mode_get
    if _newclass:
        mode = _swig_property(_libm2k.SETTINGS_mode_get, _libm2k.SETTINGS_mode_set)
    __swig_setmethods__["trigger_source"] = _libm2k.SETTINGS_trigger_source_set
    __swig_getmethods__["trigger_source"] = _libm2k.SETTINGS_trigger_source_get
    if _newclass:
        trigger_source = _swig_property(_libm2k.SETTINGS_trigger_source_get, _libm2k.SETTINGS_trigger_source_set)
    __swig_setmethods__["delay"] = _libm2k.SETTINGS_delay_set
    __swig_getmethods__["delay"] = _libm2k.SETTINGS_delay_get
    if _newclass:
        delay = _swig_property(_libm2k.SETTINGS_delay_get, _libm2k.SETTINGS_delay_set)

    def __init__(self):
        """__init__(libm2k::SETTINGS self) -> SETTINGS"""
        this = _libm2k.new_SETTINGS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_SETTINGS
    __del__ = lambda self: None
SETTINGS_swigregister = _libm2k.SETTINGS_swigregister
SETTINGS_swigregister(SETTINGS)

class CONTEXT_INFO(_object):
    """Proxy of C++ libm2k::CONTEXT_INFO class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CONTEXT_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CONTEXT_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id_vendor"] = _libm2k.CONTEXT_INFO_id_vendor_set
    __swig_getmethods__["id_vendor"] = _libm2k.CONTEXT_INFO_id_vendor_get
    if _newclass:
        id_vendor = _swig_property(_libm2k.CONTEXT_INFO_id_vendor_get, _libm2k.CONTEXT_INFO_id_vendor_set)
    __swig_setmethods__["id_product"] = _libm2k.CONTEXT_INFO_id_product_set
    __swig_getmethods__["id_product"] = _libm2k.CONTEXT_INFO_id_product_get
    if _newclass:
        id_product = _swig_property(_libm2k.CONTEXT_INFO_id_product_get, _libm2k.CONTEXT_INFO_id_product_set)
    __swig_setmethods__["manufacturer"] = _libm2k.CONTEXT_INFO_manufacturer_set
    __swig_getmethods__["manufacturer"] = _libm2k.CONTEXT_INFO_manufacturer_get
    if _newclass:
        manufacturer = _swig_property(_libm2k.CONTEXT_INFO_manufacturer_get, _libm2k.CONTEXT_INFO_manufacturer_set)
    __swig_setmethods__["product"] = _libm2k.CONTEXT_INFO_product_set
    __swig_getmethods__["product"] = _libm2k.CONTEXT_INFO_product_get
    if _newclass:
        product = _swig_property(_libm2k.CONTEXT_INFO_product_get, _libm2k.CONTEXT_INFO_product_set)
    __swig_setmethods__["serial"] = _libm2k.CONTEXT_INFO_serial_set
    __swig_getmethods__["serial"] = _libm2k.CONTEXT_INFO_serial_get
    if _newclass:
        serial = _swig_property(_libm2k.CONTEXT_INFO_serial_get, _libm2k.CONTEXT_INFO_serial_set)
    __swig_setmethods__["uri"] = _libm2k.CONTEXT_INFO_uri_set
    __swig_getmethods__["uri"] = _libm2k.CONTEXT_INFO_uri_get
    if _newclass:
        uri = _swig_property(_libm2k.CONTEXT_INFO_uri_get, _libm2k.CONTEXT_INFO_uri_set)

    def __init__(self):
        """__init__(libm2k::CONTEXT_INFO self) -> CONTEXT_INFO"""
        this = _libm2k.new_CONTEXT_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_CONTEXT_INFO
    __del__ = lambda self: None
CONTEXT_INFO_swigregister = _libm2k.CONTEXT_INFO_swigregister
CONTEXT_INFO_swigregister(CONTEXT_INFO)

class IIO_OBJECTS(_object):
    """Proxy of C++ libm2k::IIO_OBJECTS class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIO_OBJECTS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIO_OBJECTS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channels_in"] = _libm2k.IIO_OBJECTS_channels_in_set
    __swig_getmethods__["channels_in"] = _libm2k.IIO_OBJECTS_channels_in_get
    if _newclass:
        channels_in = _swig_property(_libm2k.IIO_OBJECTS_channels_in_get, _libm2k.IIO_OBJECTS_channels_in_set)
    __swig_setmethods__["channels_out"] = _libm2k.IIO_OBJECTS_channels_out_set
    __swig_getmethods__["channels_out"] = _libm2k.IIO_OBJECTS_channels_out_get
    if _newclass:
        channels_out = _swig_property(_libm2k.IIO_OBJECTS_channels_out_get, _libm2k.IIO_OBJECTS_channels_out_set)
    __swig_setmethods__["devices"] = _libm2k.IIO_OBJECTS_devices_set
    __swig_getmethods__["devices"] = _libm2k.IIO_OBJECTS_devices_get
    if _newclass:
        devices = _swig_property(_libm2k.IIO_OBJECTS_devices_get, _libm2k.IIO_OBJECTS_devices_set)
    __swig_setmethods__["buffers_rx"] = _libm2k.IIO_OBJECTS_buffers_rx_set
    __swig_getmethods__["buffers_rx"] = _libm2k.IIO_OBJECTS_buffers_rx_get
    if _newclass:
        buffers_rx = _swig_property(_libm2k.IIO_OBJECTS_buffers_rx_get, _libm2k.IIO_OBJECTS_buffers_rx_set)
    __swig_setmethods__["buffers_tx"] = _libm2k.IIO_OBJECTS_buffers_tx_set
    __swig_getmethods__["buffers_tx"] = _libm2k.IIO_OBJECTS_buffers_tx_get
    if _newclass:
        buffers_tx = _swig_property(_libm2k.IIO_OBJECTS_buffers_tx_get, _libm2k.IIO_OBJECTS_buffers_tx_set)
    __swig_setmethods__["context"] = _libm2k.IIO_OBJECTS_context_set
    __swig_getmethods__["context"] = _libm2k.IIO_OBJECTS_context_get
    if _newclass:
        context = _swig_property(_libm2k.IIO_OBJECTS_context_get, _libm2k.IIO_OBJECTS_context_set)

    def __init__(self):
        """__init__(libm2k::IIO_OBJECTS self) -> IIO_OBJECTS"""
        this = _libm2k.new_IIO_OBJECTS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_IIO_OBJECTS
    __del__ = lambda self: None
IIO_OBJECTS_swigregister = _libm2k.IIO_OBJECTS_swigregister
IIO_OBJECTS_swigregister(IIO_OBJECTS)

ANALOG_DEV = _libm2k.ANALOG_DEV
DIGITAL_DEV = _libm2k.DIGITAL_DEV
NO_DEV = _libm2k.NO_DEV
INPUT = _libm2k.INPUT
OUTPUT = _libm2k.OUTPUT
BOTH = _libm2k.BOTH
NO_DIRECTION = _libm2k.NO_DIRECTION
class ini_device_struct(_object):
    """Proxy of C++ libm2k::utils::ini_device_struct class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ini_device_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ini_device_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hw_name"] = _libm2k.ini_device_struct_hw_name_set
    __swig_getmethods__["hw_name"] = _libm2k.ini_device_struct_hw_name_get
    if _newclass:
        hw_name = _swig_property(_libm2k.ini_device_struct_hw_name_get, _libm2k.ini_device_struct_hw_name_set)
    __swig_setmethods__["key_val_pairs"] = _libm2k.ini_device_struct_key_val_pairs_set
    __swig_getmethods__["key_val_pairs"] = _libm2k.ini_device_struct_key_val_pairs_get
    if _newclass:
        key_val_pairs = _swig_property(_libm2k.ini_device_struct_key_val_pairs_get, _libm2k.ini_device_struct_key_val_pairs_set)

    def __init__(self):
        """__init__(libm2k::utils::ini_device_struct self) -> ini_device_struct"""
        this = _libm2k.new_ini_device_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_ini_device_struct
    __del__ = lambda self: None
ini_device_struct_swigregister = _libm2k.ini_device_struct_swigregister
ini_device_struct_swigregister(ini_device_struct)

class DMM(_object):
    """Proxy of C++ libm2k::analog::DMM class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMM, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_DMM
    __del__ = lambda self: None

    def reset(self):
        """
        reset(DMM self)

        Parameters
        ----------
        self: libm2k::analog::DMM *

        """
        return _libm2k.DMM_reset(self)


    def getAllChannels(self):
        """
        getAllChannels(DMM self) -> VectorStr

        Parameters
        ----------
        self: libm2k::analog::DMM *

        """
        return _libm2k.DMM_getAllChannels(self)


    def readChannel(self, *args):
        """
        readChannel(DMM self, unsigned int index) -> DMM_READING

        Parameters
        ----------
        index: unsigned int

        readChannel(DMM self, std::string chn_name) -> DMM_READING

        Parameters
        ----------
        chn_name: std::string

        """
        return _libm2k.DMM_readChannel(self, *args)


    def readAll(self):
        """
        readAll(DMM self) -> DMMReading

        Parameters
        ----------
        self: libm2k::analog::DMM *

        """
        return _libm2k.DMM_readAll(self)


    def getName(self):
        """
        getName(DMM self) -> std::string

        Parameters
        ----------
        self: libm2k::analog::DMM *

        """
        return _libm2k.DMM_getName(self)

DMM_swigregister = _libm2k.DMM_swigregister
DMM_swigregister(DMM)

class DMM_READING(_object):
    """Proxy of C++ libm2k::analog::DMM_READING class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMM_READING, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMM_READING, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libm2k.DMM_READING_name_set
    __swig_getmethods__["name"] = _libm2k.DMM_READING_name_get
    if _newclass:
        name = _swig_property(_libm2k.DMM_READING_name_get, _libm2k.DMM_READING_name_set)
    __swig_setmethods__["id"] = _libm2k.DMM_READING_id_set
    __swig_getmethods__["id"] = _libm2k.DMM_READING_id_get
    if _newclass:
        id = _swig_property(_libm2k.DMM_READING_id_get, _libm2k.DMM_READING_id_set)
    __swig_setmethods__["value"] = _libm2k.DMM_READING_value_set
    __swig_getmethods__["value"] = _libm2k.DMM_READING_value_get
    if _newclass:
        value = _swig_property(_libm2k.DMM_READING_value_get, _libm2k.DMM_READING_value_set)
    __swig_setmethods__["unit"] = _libm2k.DMM_READING_unit_set
    __swig_getmethods__["unit"] = _libm2k.DMM_READING_unit_get
    if _newclass:
        unit = _swig_property(_libm2k.DMM_READING_unit_get, _libm2k.DMM_READING_unit_set)

    def __init__(self):
        """__init__(libm2k::analog::DMM_READING self) -> DMM_READING"""
        this = _libm2k.new_DMM_READING()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_DMM_READING
    __del__ = lambda self: None
DMM_READING_swigregister = _libm2k.DMM_READING_swigregister
DMM_READING_swigregister(DMM_READING)

ANALOG_IN_CHANNEL_1 = _libm2k.ANALOG_IN_CHANNEL_1
ANALOG_IN_CHANNEL_2 = _libm2k.ANALOG_IN_CHANNEL_2
PLUS_MINUS_25V = _libm2k.PLUS_MINUS_25V
PLUS_MINUS_2_5V = _libm2k.PLUS_MINUS_2_5V
class GenericAnalogIn(_object):
    """Proxy of C++ libm2k::analog::GenericAnalogIn class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericAnalogIn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericAnalogIn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_GenericAnalogIn
    __del__ = lambda self: None

    def getSamplesInterleaved(self, nb_samples):
        """
        getSamplesInterleaved(GenericAnalogIn self, unsigned int nb_samples) -> double const *

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.GenericAnalogIn_getSamplesInterleaved(self, nb_samples)


    def getSamplesRawInterleaved(self, nb_samples):
        """
        getSamplesRawInterleaved(GenericAnalogIn self, unsigned int nb_samples) -> short const *

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.GenericAnalogIn_getSamplesRawInterleaved(self, nb_samples)


    def getSampleRate(self, *args):
        """
        getSampleRate(GenericAnalogIn self) -> double
        getSampleRate(GenericAnalogIn self, unsigned int arg2) -> double

        Parameters
        ----------
        arg2: unsigned int

        """
        return _libm2k.GenericAnalogIn_getSampleRate(self, *args)


    def setSampleRate(self, *args):
        """
        setSampleRate(GenericAnalogIn self, double sampleRate) -> double

        Parameters
        ----------
        sampleRate: double

        setSampleRate(GenericAnalogIn self, unsigned int chn_idx, double sampleRate) -> double

        Parameters
        ----------
        chn_idx: unsigned int
        sampleRate: double

        """
        return _libm2k.GenericAnalogIn_setSampleRate(self, *args)


    def getAvailableSampleRates(self, *args):
        """
        getAvailableSampleRates(GenericAnalogIn self) -> VectorD
        getAvailableSampleRates(GenericAnalogIn self, unsigned int chn_idx) -> VectorD

        Parameters
        ----------
        chn_idx: unsigned int

        """
        return _libm2k.GenericAnalogIn_getAvailableSampleRates(self, *args)


    def getMaximumSamplerate(self, *args):
        """
        getMaximumSamplerate(GenericAnalogIn self) -> double
        getMaximumSamplerate(GenericAnalogIn self, unsigned int chn_idx) -> double

        Parameters
        ----------
        chn_idx: unsigned int

        """
        return _libm2k.GenericAnalogIn_getMaximumSamplerate(self, *args)


    def enableChannel(self, index, enable):
        """
        enableChannel(GenericAnalogIn self, unsigned int index, bool enable)

        Parameters
        ----------
        index: unsigned int
        enable: bool

        """
        return _libm2k.GenericAnalogIn_enableChannel(self, index, enable)


    def setKernelBuffersCount(self, count):
        """
        setKernelBuffersCount(GenericAnalogIn self, unsigned int count)

        Parameters
        ----------
        count: unsigned int

        """
        return _libm2k.GenericAnalogIn_setKernelBuffersCount(self, count)


    def getDeviceName(self):
        """
        getDeviceName(GenericAnalogIn self) -> std::string

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogIn *

        """
        return _libm2k.GenericAnalogIn_getDeviceName(self)


    def getIioObjects(self):
        """
        getIioObjects(GenericAnalogIn self) -> IIO_OBJECTS

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogIn *

        """
        return _libm2k.GenericAnalogIn_getIioObjects(self)


    def getNbChannels(self):
        """
        getNbChannels(GenericAnalogIn self) -> unsigned int

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogIn *

        """
        return _libm2k.GenericAnalogIn_getNbChannels(self)

GenericAnalogIn_swigregister = _libm2k.GenericAnalogIn_swigregister
GenericAnalogIn_swigregister(GenericAnalogIn)

class GenericAnalogOut(_object):
    """Proxy of C++ libm2k::analog::GenericAnalogOut class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericAnalogOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericAnalogOut, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_GenericAnalogOut
    __del__ = lambda self: None

    def getSampleRate(self, *args):
        """
        getSampleRate(GenericAnalogOut self) -> double
        getSampleRate(GenericAnalogOut self, unsigned int arg2) -> double

        Parameters
        ----------
        arg2: unsigned int

        """
        return _libm2k.GenericAnalogOut_getSampleRate(self, *args)


    def setSampleRate(self, *args):
        """
        setSampleRate(GenericAnalogOut self, double sampleRate) -> double

        Parameters
        ----------
        sampleRate: double

        setSampleRate(GenericAnalogOut self, unsigned int chn_idx, double sampleRate) -> double

        Parameters
        ----------
        chn_idx: unsigned int
        sampleRate: double

        """
        return _libm2k.GenericAnalogOut_setSampleRate(self, *args)


    def getAvailableSampleRates(self):
        """
        getAvailableSampleRates(GenericAnalogOut self) -> VectorD

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogOut *

        """
        return _libm2k.GenericAnalogOut_getAvailableSampleRates(self)


    def setCyclic(self, *args):
        """
        setCyclic(GenericAnalogOut self, bool en)

        Parameters
        ----------
        en: bool

        setCyclic(GenericAnalogOut self, unsigned int chn, bool en)

        Parameters
        ----------
        chn: unsigned int
        en: bool

        """
        return _libm2k.GenericAnalogOut_setCyclic(self, *args)


    def getCyclic(self, chn):
        """
        getCyclic(GenericAnalogOut self, unsigned int chn) -> bool

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.GenericAnalogOut_getCyclic(self, chn)


    def push(self, *args):
        """
        push(GenericAnalogOut self, unsigned int chn_idx, VectorD data)

        Parameters
        ----------
        chn_idx: unsigned int
        data: std::vector< double,std::allocator< double > > const &

        push(GenericAnalogOut self, unsigned int chn_idx, double * data, unsigned int nb_samples)

        Parameters
        ----------
        chn_idx: unsigned int
        data: double *
        nb_samples: unsigned int

        """
        return _libm2k.GenericAnalogOut_push(self, *args)


    def pushRaw(self, *args):
        """
        pushRaw(GenericAnalogOut self, unsigned int chn_idx, VectorS data)

        Parameters
        ----------
        chn_idx: unsigned int
        data: std::vector< short,std::allocator< short > > const &

        pushRaw(GenericAnalogOut self, unsigned int chn_idx, short * data, unsigned int nb_samples)

        Parameters
        ----------
        chn_idx: unsigned int
        data: short *
        nb_samples: unsigned int

        """
        return _libm2k.GenericAnalogOut_pushRaw(self, *args)


    def stop(self):
        """
        stop(GenericAnalogOut self)

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogOut *

        """
        return _libm2k.GenericAnalogOut_stop(self)


    def getName(self):
        """
        getName(GenericAnalogOut self) -> std::string

        Parameters
        ----------
        self: libm2k::analog::GenericAnalogOut *

        """
        return _libm2k.GenericAnalogOut_getName(self)


    def enableChannel(self, chnIdx, enable):
        """
        enableChannel(GenericAnalogOut self, unsigned int chnIdx, bool enable)

        Parameters
        ----------
        chnIdx: unsigned int
        enable: bool

        """
        return _libm2k.GenericAnalogOut_enableChannel(self, chnIdx, enable)


    def isChannelEnabled(self, chnIdx):
        """
        isChannelEnabled(GenericAnalogOut self, unsigned int chnIdx) -> bool

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.GenericAnalogOut_isChannelEnabled(self, chnIdx)

GenericAnalogOut_swigregister = _libm2k.GenericAnalogOut_swigregister
GenericAnalogOut_swigregister(GenericAnalogOut)

class M2kHardwareTrigger(_object):
    """Proxy of C++ libm2k::M2kHardwareTrigger class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kHardwareTrigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kHardwareTrigger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kHardwareTrigger
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2kHardwareTrigger self)

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_reset(self)


    def getAnalogLevelRaw(self, chnIdx):
        """
        getAnalogLevelRaw(M2kHardwareTrigger self, unsigned int chnIdx) -> int

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogLevelRaw(self, chnIdx)


    def setAnalogLevelRaw(self, chnIdx, level):
        """
        setAnalogLevelRaw(M2kHardwareTrigger self, unsigned int chnIdx, int level)

        Parameters
        ----------
        chnIdx: unsigned int
        level: int

        """
        return _libm2k.M2kHardwareTrigger_setAnalogLevelRaw(self, chnIdx, level)


    def setAnalogLevel(self, chnIdx, v_level):
        """
        setAnalogLevel(M2kHardwareTrigger self, unsigned int chnIdx, double v_level)

        Parameters
        ----------
        chnIdx: unsigned int
        v_level: double

        """
        return _libm2k.M2kHardwareTrigger_setAnalogLevel(self, chnIdx, v_level)


    def getAnalogLevel(self, chnIdx):
        """
        getAnalogLevel(M2kHardwareTrigger self, unsigned int chnIdx) -> double

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogLevel(self, chnIdx)


    def getAnalogHysteresis(self, chnIdx):
        """
        getAnalogHysteresis(M2kHardwareTrigger self, unsigned int chnIdx) -> double

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogHysteresis(self, chnIdx)


    def setAnalogHysteresis(self, chnIdx, hysteresis):
        """
        setAnalogHysteresis(M2kHardwareTrigger self, unsigned int chnIdx, double hysteresis)

        Parameters
        ----------
        chnIdx: unsigned int
        hysteresis: double

        """
        return _libm2k.M2kHardwareTrigger_setAnalogHysteresis(self, chnIdx, hysteresis)


    def getAnalogCondition(self, chnIdx):
        """
        getAnalogCondition(M2kHardwareTrigger self, unsigned int chnIdx) -> libm2k::M2K_TRIGGER_CONDITION_ANALOG

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogCondition(self, chnIdx)


    def setAnalogCondition(self, chnIdx, cond):
        """
        setAnalogCondition(M2kHardwareTrigger self, unsigned int chnIdx, libm2k::M2K_TRIGGER_CONDITION_ANALOG cond)

        Parameters
        ----------
        chnIdx: unsigned int
        cond: enum libm2k::M2K_TRIGGER_CONDITION_ANALOG

        """
        return _libm2k.M2kHardwareTrigger_setAnalogCondition(self, chnIdx, cond)


    def getDigitalCondition(self, chnIdx):
        """
        getDigitalCondition(M2kHardwareTrigger self, unsigned int chnIdx) -> libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getDigitalCondition(self, chnIdx)


    def setDigitalCondition(self, chnIdx, cond):
        """
        setDigitalCondition(M2kHardwareTrigger self, unsigned int chnIdx, libm2k::M2K_TRIGGER_CONDITION_DIGITAL cond)

        Parameters
        ----------
        chnIdx: unsigned int
        cond: enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        """
        return _libm2k.M2kHardwareTrigger_setDigitalCondition(self, chnIdx, cond)


    def getAnalogMode(self, chnIdx):
        """
        getAnalogMode(M2kHardwareTrigger self, unsigned int chnIdx) -> libm2k::M2K_TRIGGER_MODE

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogMode(self, chnIdx)


    def setAnalogMode(self, chnIdx, mode):
        """
        setAnalogMode(M2kHardwareTrigger self, unsigned int chnIdx, libm2k::M2K_TRIGGER_MODE mode)

        Parameters
        ----------
        chnIdx: unsigned int
        mode: enum libm2k::M2K_TRIGGER_MODE

        """
        return _libm2k.M2kHardwareTrigger_setAnalogMode(self, chnIdx, mode)


    def getDigitalMode(self):
        """
        getDigitalMode(M2kHardwareTrigger self) -> libm2k::digital::DIO_TRIGGER_MODE

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getDigitalMode(self)


    def setDigitalMode(self, mode):
        """
        setDigitalMode(M2kHardwareTrigger self, libm2k::digital::DIO_TRIGGER_MODE mode)

        Parameters
        ----------
        mode: enum libm2k::digital::DIO_TRIGGER_MODE

        """
        return _libm2k.M2kHardwareTrigger_setDigitalMode(self, mode)


    def getAnalogSource(self):
        """
        getAnalogSource(M2kHardwareTrigger self) -> libm2k::M2K_TRIGGER_SOURCE_ANALOG

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getAnalogSource(self)


    def setAnalogSource(self, src):
        """
        setAnalogSource(M2kHardwareTrigger self, libm2k::M2K_TRIGGER_SOURCE_ANALOG src)

        Parameters
        ----------
        src: enum libm2k::M2K_TRIGGER_SOURCE_ANALOG

        """
        return _libm2k.M2kHardwareTrigger_setAnalogSource(self, src)


    def getAnalogSourceChannel(self):
        """
        getAnalogSourceChannel(M2kHardwareTrigger self) -> int

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getAnalogSourceChannel(self)


    def setAnalogSourceChannel(self, chnIdx):
        """
        setAnalogSourceChannel(M2kHardwareTrigger self, unsigned int chnIdx)

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_setAnalogSourceChannel(self, chnIdx)


    def getAnalogDelay(self):
        """
        getAnalogDelay(M2kHardwareTrigger self) -> int

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_getAnalogDelay(self)


    def setAnalogDelay(self, delay):
        """
        setAnalogDelay(M2kHardwareTrigger self, int delay)

        Parameters
        ----------
        delay: int

        """
        return _libm2k.M2kHardwareTrigger_setAnalogDelay(self, delay)


    def getDigitalDelay(self):
        """
        getDigitalDelay(M2kHardwareTrigger self) -> int

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_getDigitalDelay(self)


    def setDigitalDelay(self, delay):
        """
        setDigitalDelay(M2kHardwareTrigger self, int delay)

        Parameters
        ----------
        delay: int

        """
        return _libm2k.M2kHardwareTrigger_setDigitalDelay(self, delay)


    def getCurrentHwSettings(self):
        """
        getCurrentHwSettings(M2kHardwareTrigger self) -> SETTINGS

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getCurrentHwSettings(self)


    def setHwTriggerSettings(self, settings):
        """
        setHwTriggerSettings(M2kHardwareTrigger self, SETTINGS settings)

        Parameters
        ----------
        settings: libm2k::SETTINGS *

        """
        return _libm2k.M2kHardwareTrigger_setHwTriggerSettings(self, settings)


    def setAnalogStreamingFlag(self, enable):
        """
        setAnalogStreamingFlag(M2kHardwareTrigger self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _libm2k.M2kHardwareTrigger_setAnalogStreamingFlag(self, enable)


    def getAnalogStreamingFlag(self):
        """
        getAnalogStreamingFlag(M2kHardwareTrigger self) -> bool

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getAnalogStreamingFlag(self)


    def setDigitalStreamingFlag(self, enable):
        """
        setDigitalStreamingFlag(M2kHardwareTrigger self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _libm2k.M2kHardwareTrigger_setDigitalStreamingFlag(self, enable)


    def getDigitalStreamingFlag(self):
        """
        getDigitalStreamingFlag(M2kHardwareTrigger self) -> bool

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getDigitalStreamingFlag(self)


    def setCalibParameters(self, chnIdx, scaling, vert_offset):
        """
        setCalibParameters(M2kHardwareTrigger self, unsigned int chnIdx, double scaling, double vert_offset)

        Parameters
        ----------
        chnIdx: unsigned int
        scaling: double
        vert_offset: double

        """
        return _libm2k.M2kHardwareTrigger_setCalibParameters(self, chnIdx, scaling, vert_offset)


    def getAnalogExternalCondition(self, chnIdx):
        """
        getAnalogExternalCondition(M2kHardwareTrigger self, unsigned int chnIdx) -> libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kHardwareTrigger_getAnalogExternalCondition(self, chnIdx)


    def setAnalogExternalCondition(self, chnIdx, cond):
        """
        setAnalogExternalCondition(M2kHardwareTrigger self, unsigned int chnIdx, libm2k::M2K_TRIGGER_CONDITION_DIGITAL cond)

        Parameters
        ----------
        chnIdx: unsigned int
        cond: enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        """
        return _libm2k.M2kHardwareTrigger_setAnalogExternalCondition(self, chnIdx, cond)


    def getDigitalExternalCondition(self):
        """
        getDigitalExternalCondition(M2kHardwareTrigger self) -> libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_getDigitalExternalCondition(self)


    def setDigitalExternalCondition(self, cond):
        """
        setDigitalExternalCondition(M2kHardwareTrigger self, libm2k::M2K_TRIGGER_CONDITION_DIGITAL cond)

        Parameters
        ----------
        cond: enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL

        """
        return _libm2k.M2kHardwareTrigger_setDigitalExternalCondition(self, cond)


    def setAnalogExternalOutSelect(self, output_select):
        """
        setAnalogExternalOutSelect(M2kHardwareTrigger self, libm2k::M2K_TRIGGER_OUT_SELECT output_select)

        Parameters
        ----------
        output_select: enum libm2k::M2K_TRIGGER_OUT_SELECT

        """
        return _libm2k.M2kHardwareTrigger_setAnalogExternalOutSelect(self, output_select)


    def getAnalogExternalOutSelect(self):
        """
        getAnalogExternalOutSelect(M2kHardwareTrigger self) -> libm2k::M2K_TRIGGER_OUT_SELECT

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger *

        """
        return _libm2k.M2kHardwareTrigger_getAnalogExternalOutSelect(self)


    def hasExternalTriggerIn(self):
        """
        hasExternalTriggerIn(M2kHardwareTrigger self) -> bool

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_hasExternalTriggerIn(self)


    def hasExternalTriggerOut(self):
        """
        hasExternalTriggerOut(M2kHardwareTrigger self) -> bool

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_hasExternalTriggerOut(self)


    def hasCrossInstrumentTrigger(self):
        """
        hasCrossInstrumentTrigger(M2kHardwareTrigger self) -> bool

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_hasCrossInstrumentTrigger(self)


    def setDigitalSource(self, external_src):
        """
        setDigitalSource(M2kHardwareTrigger self, libm2k::M2K_TRIGGER_SOURCE_DIGITAL external_src)

        Parameters
        ----------
        external_src: enum libm2k::M2K_TRIGGER_SOURCE_DIGITAL

        """
        return _libm2k.M2kHardwareTrigger_setDigitalSource(self, external_src)


    def getDigitalSource(self):
        """
        getDigitalSource(M2kHardwareTrigger self) -> libm2k::M2K_TRIGGER_SOURCE_DIGITAL

        Parameters
        ----------
        self: libm2k::M2kHardwareTrigger const *

        """
        return _libm2k.M2kHardwareTrigger_getDigitalSource(self)

M2kHardwareTrigger_swigregister = _libm2k.M2kHardwareTrigger_swigregister
M2kHardwareTrigger_swigregister(M2kHardwareTrigger)

class M2kAnalogIn(_object):
    """Proxy of C++ libm2k::analog::M2kAnalogIn class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kAnalogIn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kAnalogIn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kAnalogIn
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2kAnalogIn self)

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_reset(self)


    def startAcquisition(self, nb_samples):
        """
        startAcquisition(M2kAnalogIn self, unsigned int nb_samples)

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogIn_startAcquisition(self, nb_samples)


    def stopAcquisition(self):
        """
        stopAcquisition(M2kAnalogIn self)

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_stopAcquisition(self)


    def getSamplesRaw(self, nb_samples):
        """
        getSamplesRaw(M2kAnalogIn self, unsigned int nb_samples) -> VectorVectorD

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogIn_getSamplesRaw(self, nb_samples)


    def getSamplesInterleaved(self, nb_samples):
        """
        getSamplesInterleaved(M2kAnalogIn self, unsigned int nb_samples) -> double const *

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogIn_getSamplesInterleaved(self, nb_samples)


    def getSamplesRawInterleaved(self, nb_samples):
        """
        getSamplesRawInterleaved(M2kAnalogIn self, unsigned int nb_samples) -> short const *

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogIn_getSamplesRawInterleaved(self, nb_samples)


    def getVoltageRaw(self, *args):
        """
        getVoltageRaw(M2kAnalogIn self, unsigned int ch) -> short

        Parameters
        ----------
        ch: unsigned int

        getVoltageRaw(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL ch) -> short

        Parameters
        ----------
        ch: enum libm2k::analog::ANALOG_IN_CHANNEL

        getVoltageRaw(M2kAnalogIn self) -> VectorS

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getVoltageRaw(self, *args)


    def getVoltage(self, *args):
        """
        getVoltage(M2kAnalogIn self, unsigned int ch) -> double

        Parameters
        ----------
        ch: unsigned int

        getVoltage(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL ch) -> double

        Parameters
        ----------
        ch: enum libm2k::analog::ANALOG_IN_CHANNEL

        getVoltage(M2kAnalogIn self) -> VectorD

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getVoltage(self, *args)


    def setVerticalOffset(self, channel, vertOffset):
        """
        setVerticalOffset(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL channel, double vertOffset)

        Parameters
        ----------
        channel: enum libm2k::analog::ANALOG_IN_CHANNEL
        vertOffset: double

        """
        return _libm2k.M2kAnalogIn_setVerticalOffset(self, channel, vertOffset)


    def getVerticalOffset(self, channel):
        """
        getVerticalOffset(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL channel) -> double

        Parameters
        ----------
        channel: enum libm2k::analog::ANALOG_IN_CHANNEL

        """
        return _libm2k.M2kAnalogIn_getVerticalOffset(self, channel)


    def getScalingFactor(self, ch):
        """
        getScalingFactor(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL ch) -> double

        Parameters
        ----------
        ch: enum libm2k::analog::ANALOG_IN_CHANNEL

        """
        return _libm2k.M2kAnalogIn_getScalingFactor(self, ch)


    def setRange(self, *args):
        """
        setRange(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL channel, libm2k::analog::M2K_RANGE range)

        Parameters
        ----------
        channel: enum libm2k::analog::ANALOG_IN_CHANNEL
        range: enum libm2k::analog::M2K_RANGE

        setRange(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL channel, double min, double max)

        Parameters
        ----------
        channel: enum libm2k::analog::ANALOG_IN_CHANNEL
        min: double
        max: double

        """
        return _libm2k.M2kAnalogIn_setRange(self, *args)


    def getRange(self, channel):
        """
        getRange(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL channel) -> libm2k::analog::M2K_RANGE

        Parameters
        ----------
        channel: enum libm2k::analog::ANALOG_IN_CHANNEL

        """
        return _libm2k.M2kAnalogIn_getRange(self, channel)


    def getRangeLimits(self, range):
        """
        getRangeLimits(M2kAnalogIn self, libm2k::analog::M2K_RANGE range) -> PairDD

        Parameters
        ----------
        range: enum libm2k::analog::M2K_RANGE

        """
        return _libm2k.M2kAnalogIn_getRangeLimits(self, range)


    def getAvailableRanges(self):
        """
        getAvailableRanges(M2kAnalogIn self) -> VectorPairDD

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getAvailableRanges(self)


    def getOversamplingRatio(self, *args):
        """
        getOversamplingRatio(M2kAnalogIn self) -> int
        getOversamplingRatio(M2kAnalogIn self, unsigned int chn_idx) -> int

        Parameters
        ----------
        chn_idx: unsigned int

        """
        return _libm2k.M2kAnalogIn_getOversamplingRatio(self, *args)


    def setOversamplingRatio(self, *args):
        """
        setOversamplingRatio(M2kAnalogIn self, int oversampling) -> int

        Parameters
        ----------
        oversampling: int

        setOversamplingRatio(M2kAnalogIn self, unsigned int chn_idx, int oversampling) -> int

        Parameters
        ----------
        chn_idx: unsigned int
        oversampling: int

        """
        return _libm2k.M2kAnalogIn_setOversamplingRatio(self, *args)


    def getSampleRate(self, *args):
        """
        getSampleRate(M2kAnalogIn self) -> double
        getSampleRate(M2kAnalogIn self, unsigned int chn_idx) -> double

        Parameters
        ----------
        chn_idx: unsigned int

        """
        return _libm2k.M2kAnalogIn_getSampleRate(self, *args)


    def getAvailableSampleRates(self):
        """
        getAvailableSampleRates(M2kAnalogIn self) -> VectorD

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getAvailableSampleRates(self)


    def setSampleRate(self, *args):
        """
        setSampleRate(M2kAnalogIn self, double samplerate) -> double

        Parameters
        ----------
        samplerate: double

        setSampleRate(M2kAnalogIn self, unsigned int chn_idx, double samplerate) -> double

        Parameters
        ----------
        chn_idx: unsigned int
        samplerate: double

        """
        return _libm2k.M2kAnalogIn_setSampleRate(self, *args)


    def getHysteresisRange(self, chn):
        """
        getHysteresisRange(M2kAnalogIn self, libm2k::analog::ANALOG_IN_CHANNEL chn) -> PairDD

        Parameters
        ----------
        chn: enum libm2k::analog::ANALOG_IN_CHANNEL

        """
        return _libm2k.M2kAnalogIn_getHysteresisRange(self, chn)


    def getFilterCompensation(self, samplerate):
        """
        getFilterCompensation(M2kAnalogIn self, double samplerate) -> double

        Parameters
        ----------
        samplerate: double

        """
        return _libm2k.M2kAnalogIn_getFilterCompensation(self, samplerate)


    def getValueForRange(self, range):
        """
        getValueForRange(M2kAnalogIn self, libm2k::analog::M2K_RANGE range) -> double

        Parameters
        ----------
        range: enum libm2k::analog::M2K_RANGE

        """
        return _libm2k.M2kAnalogIn_getValueForRange(self, range)


    def convertRawToVolts(self, channel, raw):
        """
        convertRawToVolts(M2kAnalogIn self, unsigned int channel, short raw) -> double

        Parameters
        ----------
        channel: unsigned int
        raw: short

        """
        return _libm2k.M2kAnalogIn_convertRawToVolts(self, channel, raw)


    def convertVoltsToRaw(self, channel, voltage):
        """
        convertVoltsToRaw(M2kAnalogIn self, unsigned int channel, double voltage) -> short

        Parameters
        ----------
        channel: unsigned int
        voltage: double

        """
        return _libm2k.M2kAnalogIn_convertVoltsToRaw(self, channel, voltage)


    def getNbChannels(self):
        """
        getNbChannels(M2kAnalogIn self) -> unsigned int

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getNbChannels(self)


    def getName(self):
        """
        getName(M2kAnalogIn self) -> std::string

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getName(self)


    def enableChannel(self, chnIdx, enable):
        """
        enableChannel(M2kAnalogIn self, unsigned int chnIdx, bool enable)

        Parameters
        ----------
        chnIdx: unsigned int
        enable: bool

        """
        return _libm2k.M2kAnalogIn_enableChannel(self, chnIdx, enable)


    def isChannelEnabled(self, chnIdx):
        """
        isChannelEnabled(M2kAnalogIn self, unsigned int chnIdx) -> bool

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kAnalogIn_isChannelEnabled(self, chnIdx)


    def cancelAcquisition(self):
        """
        cancelAcquisition(M2kAnalogIn self)

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_cancelAcquisition(self)


    def setKernelBuffersCount(self, count):
        """
        setKernelBuffersCount(M2kAnalogIn self, unsigned int count)

        Parameters
        ----------
        count: unsigned int

        """
        return _libm2k.M2kAnalogIn_setKernelBuffersCount(self, count)


    def getTrigger(self):
        """
        getTrigger(M2kAnalogIn self) -> M2kHardwareTrigger

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getTrigger(self)


    def getIioObjects(self):
        """
        getIioObjects(M2kAnalogIn self) -> IIO_OBJECTS

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getIioObjects(self)


    def getSamples(self, *args):
        """
        getSamples(M2kAnalogIn self, unsigned int nb_samples) -> VectorVectorD

        Parameters
        ----------
        nb_samples: unsigned int

        getSamples(M2kAnalogIn self, VectorVectorD data, unsigned int nb_samples)

        Parameters
        ----------
        data: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogIn_getSamples(self, *args)


    def getChannelName(self, channel):
        """
        getChannelName(M2kAnalogIn self, unsigned int channel) -> std::string

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kAnalogIn_getChannelName(self, channel)


    def getMaximumSamplerate(self):
        """
        getMaximumSamplerate(M2kAnalogIn self) -> double

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogIn *

        """
        return _libm2k.M2kAnalogIn_getMaximumSamplerate(self)

M2kAnalogIn_swigregister = _libm2k.M2kAnalogIn_swigregister
M2kAnalogIn_swigregister(M2kAnalogIn)

class M2kAnalogOut(_object):
    """Proxy of C++ libm2k::analog::M2kAnalogOut class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kAnalogOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kAnalogOut, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kAnalogOut
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2kAnalogOut self)

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogOut *

        """
        return _libm2k.M2kAnalogOut_reset(self)


    def getOversamplingRatio(self, *args):
        """
        getOversamplingRatio(M2kAnalogOut self) -> VectorI
        getOversamplingRatio(M2kAnalogOut self, unsigned int chn) -> int

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_getOversamplingRatio(self, *args)


    def setOversamplingRatio(self, *args):
        """
        setOversamplingRatio(M2kAnalogOut self, VectorI oversampling_ratio) -> VectorI

        Parameters
        ----------
        oversampling_ratio: std::vector< int,std::allocator< int > >

        setOversamplingRatio(M2kAnalogOut self, unsigned int chn, int oversampling_ratio) -> int

        Parameters
        ----------
        chn: unsigned int
        oversampling_ratio: int

        """
        return _libm2k.M2kAnalogOut_setOversamplingRatio(self, *args)


    def getSampleRate(self, *args):
        """
        getSampleRate(M2kAnalogOut self) -> VectorD
        getSampleRate(M2kAnalogOut self, unsigned int chn) -> double

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_getSampleRate(self, *args)


    def getAvailableSampleRates(self, chn):
        """
        getAvailableSampleRates(M2kAnalogOut self, unsigned int chn) -> VectorD

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_getAvailableSampleRates(self, chn)


    def setSampleRate(self, *args):
        """
        setSampleRate(M2kAnalogOut self, VectorD samplerates) -> VectorD

        Parameters
        ----------
        samplerates: std::vector< double,std::allocator< double > >

        setSampleRate(M2kAnalogOut self, unsigned int chn, double samplerate) -> double

        Parameters
        ----------
        chn: unsigned int
        samplerate: double

        """
        return _libm2k.M2kAnalogOut_setSampleRate(self, *args)


    def setSyncedDma(self, en, chn=-1):
        """
        setSyncedDma(M2kAnalogOut self, bool en, int chn=-1)

        Parameters
        ----------
        en: bool
        chn: int

        setSyncedDma(M2kAnalogOut self, bool en)

        Parameters
        ----------
        en: bool

        """
        return _libm2k.M2kAnalogOut_setSyncedDma(self, en, chn)


    def getSyncedDma(self, chn=-1):
        """
        getSyncedDma(M2kAnalogOut self, int chn=-1) -> bool

        Parameters
        ----------
        chn: int

        getSyncedDma(M2kAnalogOut self) -> bool

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogOut *

        """
        return _libm2k.M2kAnalogOut_getSyncedDma(self, chn)


    def setSyncedStartDma(self, en, chn=-1):
        """
        setSyncedStartDma(M2kAnalogOut self, bool en, int chn=-1)

        Parameters
        ----------
        en: bool
        chn: int

        setSyncedStartDma(M2kAnalogOut self, bool en)

        Parameters
        ----------
        en: bool

        """
        return _libm2k.M2kAnalogOut_setSyncedStartDma(self, en, chn)


    def getSyncedStartDma(self, chn=-1):
        """
        getSyncedStartDma(M2kAnalogOut self, int chn=-1) -> bool

        Parameters
        ----------
        chn: int

        getSyncedStartDma(M2kAnalogOut self) -> bool

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogOut *

        """
        return _libm2k.M2kAnalogOut_getSyncedStartDma(self, chn)


    def setCyclic(self, *args):
        """
        setCyclic(M2kAnalogOut self, bool en)

        Parameters
        ----------
        en: bool

        setCyclic(M2kAnalogOut self, unsigned int chn, bool en)

        Parameters
        ----------
        chn: unsigned int
        en: bool

        """
        return _libm2k.M2kAnalogOut_setCyclic(self, *args)


    def getCyclic(self, chn):
        """
        getCyclic(M2kAnalogOut self, unsigned int chn) -> bool

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_getCyclic(self, chn)


    def getScalingFactor(self, chn):
        """
        getScalingFactor(M2kAnalogOut self, unsigned int chn) -> double

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_getScalingFactor(self, chn)


    def getFilterCompensation(self, samplerate):
        """
        getFilterCompensation(M2kAnalogOut self, double samplerate) -> double

        Parameters
        ----------
        samplerate: double

        """
        return _libm2k.M2kAnalogOut_getFilterCompensation(self, samplerate)


    def pushRawBytes(self, chnIdx, data, nb_samples):
        """
        pushRawBytes(M2kAnalogOut self, unsigned int chnIdx, short * data, unsigned int nb_samples)

        Parameters
        ----------
        chnIdx: unsigned int
        data: short *
        nb_samples: unsigned int

        """
        return _libm2k.M2kAnalogOut_pushRawBytes(self, chnIdx, data, nb_samples)


    def push(self, *args):
        """
        push(M2kAnalogOut self, unsigned int chnIdx, VectorD data)

        Parameters
        ----------
        chnIdx: unsigned int
        data: std::vector< double,std::allocator< double > > const &

        push(M2kAnalogOut self, VectorVectorD data)

        Parameters
        ----------
        data: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _libm2k.M2kAnalogOut_push(self, *args)


    def pushRaw(self, *args):
        """
        pushRaw(M2kAnalogOut self, unsigned int chnIdx, VectorS data)

        Parameters
        ----------
        chnIdx: unsigned int
        data: std::vector< short,std::allocator< short > > const &

        pushRaw(M2kAnalogOut self, std::vector< std::vector< short,std::allocator< short > >,std::allocator< std::vector< short,std::allocator< short > > > > const & data)

        Parameters
        ----------
        data: std::vector< std::vector< short,std::allocator< short > >,std::allocator< std::vector< short,std::allocator< short > > > > const &

        """
        return _libm2k.M2kAnalogOut_pushRaw(self, *args)


    def stop(self, *args):
        """
        stop(M2kAnalogOut self)
        stop(M2kAnalogOut self, unsigned int chn)

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_stop(self, *args)


    def cancelBuffer(self, *args):
        """
        cancelBuffer(M2kAnalogOut self)
        cancelBuffer(M2kAnalogOut self, unsigned int chn)

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kAnalogOut_cancelBuffer(self, *args)


    def enableChannel(self, chnIdx, enable):
        """
        enableChannel(M2kAnalogOut self, unsigned int chnIdx, bool enable)

        Parameters
        ----------
        chnIdx: unsigned int
        enable: bool

        """
        return _libm2k.M2kAnalogOut_enableChannel(self, chnIdx, enable)


    def isChannelEnabled(self, chnIdx):
        """
        isChannelEnabled(M2kAnalogOut self, unsigned int chnIdx) -> bool

        Parameters
        ----------
        chnIdx: unsigned int

        """
        return _libm2k.M2kAnalogOut_isChannelEnabled(self, chnIdx)


    def setKernelBuffersCount(self, chnIdx, count):
        """
        setKernelBuffersCount(M2kAnalogOut self, unsigned int chnIdx, unsigned int count)

        Parameters
        ----------
        chnIdx: unsigned int
        count: unsigned int

        """
        return _libm2k.M2kAnalogOut_setKernelBuffersCount(self, chnIdx, count)


    def convertVoltsToRaw(self, channel, voltage):
        """
        convertVoltsToRaw(M2kAnalogOut self, unsigned int channel, double voltage) -> short

        Parameters
        ----------
        channel: unsigned int
        voltage: double

        """
        return _libm2k.M2kAnalogOut_convertVoltsToRaw(self, channel, voltage)


    def convertRawToVolts(self, channel, raw):
        """
        convertRawToVolts(M2kAnalogOut self, unsigned int channel, short raw) -> double

        Parameters
        ----------
        channel: unsigned int
        raw: short

        """
        return _libm2k.M2kAnalogOut_convertRawToVolts(self, channel, raw)


    def getIioObjects(self):
        """
        getIioObjects(M2kAnalogOut self) -> IIO_OBJECTS

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogOut *

        """
        return _libm2k.M2kAnalogOut_getIioObjects(self)


    def getNbChannels(self):
        """
        getNbChannels(M2kAnalogOut self) -> unsigned int

        Parameters
        ----------
        self: libm2k::analog::M2kAnalogOut *

        """
        return _libm2k.M2kAnalogOut_getNbChannels(self)


    def getChannelName(self, channel):
        """
        getChannelName(M2kAnalogOut self, unsigned int channel) -> std::string

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kAnalogOut_getChannelName(self, channel)


    def getMaximumSamplerate(self, chn_idx):
        """
        getMaximumSamplerate(M2kAnalogOut self, unsigned int chn_idx) -> double

        Parameters
        ----------
        chn_idx: unsigned int

        """
        return _libm2k.M2kAnalogOut_getMaximumSamplerate(self, chn_idx)

M2kAnalogOut_swigregister = _libm2k.M2kAnalogOut_swigregister
M2kAnalogOut_swigregister(M2kAnalogOut)

class M2kPowerSupply(_object):
    """Proxy of C++ libm2k::analog::M2kPowerSupply class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kPowerSupply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kPowerSupply, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kPowerSupply
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2kPowerSupply self)

        Parameters
        ----------
        self: libm2k::analog::M2kPowerSupply *

        """
        return _libm2k.M2kPowerSupply_reset(self)


    def enableChannel(self, chn, en):
        """
        enableChannel(M2kPowerSupply self, unsigned int chn, bool en)

        Parameters
        ----------
        chn: unsigned int
        en: bool

        """
        return _libm2k.M2kPowerSupply_enableChannel(self, chn, en)


    def enableAll(self, en):
        """
        enableAll(M2kPowerSupply self, bool en)

        Parameters
        ----------
        en: bool

        """
        return _libm2k.M2kPowerSupply_enableAll(self, en)


    def readChannel(self, chn):
        """
        readChannel(M2kPowerSupply self, unsigned int chn) -> double

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kPowerSupply_readChannel(self, chn)


    def pushChannel(self, chn, value):
        """
        pushChannel(M2kPowerSupply self, unsigned int chn, double value)

        Parameters
        ----------
        chn: unsigned int
        value: double

        """
        return _libm2k.M2kPowerSupply_pushChannel(self, chn, value)


    def powerDownDacs(self, powerdown):
        """
        powerDownDacs(M2kPowerSupply self, bool powerdown)

        Parameters
        ----------
        powerdown: bool

        """
        return _libm2k.M2kPowerSupply_powerDownDacs(self, powerdown)


    def anyChannelEnabled(self):
        """
        anyChannelEnabled(M2kPowerSupply self) -> bool

        Parameters
        ----------
        self: libm2k::analog::M2kPowerSupply *

        """
        return _libm2k.M2kPowerSupply_anyChannelEnabled(self)

M2kPowerSupply_swigregister = _libm2k.M2kPowerSupply_swigregister
M2kPowerSupply_swigregister(M2kPowerSupply)

DIO_INPUT = _libm2k.DIO_INPUT
DIO_OUTPUT = _libm2k.DIO_OUTPUT
LOW = _libm2k.LOW
HIGH = _libm2k.HIGH
DIO_CHANNEL_0 = _libm2k.DIO_CHANNEL_0
DIO_CHANNEL_1 = _libm2k.DIO_CHANNEL_1
DIO_CHANNEL_2 = _libm2k.DIO_CHANNEL_2
DIO_CHANNEL_3 = _libm2k.DIO_CHANNEL_3
DIO_CHANNEL_4 = _libm2k.DIO_CHANNEL_4
DIO_CHANNEL_5 = _libm2k.DIO_CHANNEL_5
DIO_CHANNEL_6 = _libm2k.DIO_CHANNEL_6
DIO_CHANNEL_7 = _libm2k.DIO_CHANNEL_7
DIO_CHANNEL_8 = _libm2k.DIO_CHANNEL_8
DIO_CHANNEL_9 = _libm2k.DIO_CHANNEL_9
DIO_CHANNEL_10 = _libm2k.DIO_CHANNEL_10
DIO_CHANNEL_11 = _libm2k.DIO_CHANNEL_11
DIO_CHANNEL_12 = _libm2k.DIO_CHANNEL_12
DIO_CHANNEL_13 = _libm2k.DIO_CHANNEL_13
DIO_CHANNEL_14 = _libm2k.DIO_CHANNEL_14
DIO_CHANNEL_15 = _libm2k.DIO_CHANNEL_15
DIO_OPENDRAIN = _libm2k.DIO_OPENDRAIN
DIO_PUSHPULL = _libm2k.DIO_PUSHPULL
DIO_OR = _libm2k.DIO_OR
DIO_AND = _libm2k.DIO_AND
class channel(_object):
    """Proxy of C++ libm2k::digital::channel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, channel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_channel"] = _libm2k.channel_m_channel_set
    __swig_getmethods__["m_channel"] = _libm2k.channel_m_channel_get
    if _newclass:
        m_channel = _swig_property(_libm2k.channel_m_channel_get, _libm2k.channel_m_channel_set)
    __swig_setmethods__["m_direction"] = _libm2k.channel_m_direction_set
    __swig_getmethods__["m_direction"] = _libm2k.channel_m_direction_get
    if _newclass:
        m_direction = _swig_property(_libm2k.channel_m_direction_get, _libm2k.channel_m_direction_set)

    def __init__(self):
        """__init__(libm2k::digital::channel self) -> channel"""
        this = _libm2k.new_channel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_channel
    __del__ = lambda self: None
channel_swigregister = _libm2k.channel_swigregister
channel_swigregister(channel)

class M2kDigital(_object):
    """Proxy of C++ libm2k::digital::M2kDigital class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kDigital, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kDigital, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kDigital
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2kDigital self)

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_reset(self)


    def setDirection(self, *args):
        """
        setDirection(M2kDigital self, unsigned short mask)

        Parameters
        ----------
        mask: unsigned short

        setDirection(M2kDigital self, unsigned int index, libm2k::digital::DIO_DIRECTION dir)

        Parameters
        ----------
        index: unsigned int
        dir: enum libm2k::digital::DIO_DIRECTION

        setDirection(M2kDigital self, unsigned int index, bool dir)

        Parameters
        ----------
        index: unsigned int
        dir: bool

        setDirection(M2kDigital self, libm2k::digital::DIO_CHANNEL index, bool dir)

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL
        dir: bool

        setDirection(M2kDigital self, libm2k::digital::DIO_CHANNEL index, libm2k::digital::DIO_DIRECTION dir)

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL
        dir: enum libm2k::digital::DIO_DIRECTION

        """
        return _libm2k.M2kDigital_setDirection(self, *args)


    def getDirection(self, index):
        """
        getDirection(M2kDigital self, libm2k::digital::DIO_CHANNEL index) -> libm2k::digital::DIO_DIRECTION

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL

        """
        return _libm2k.M2kDigital_getDirection(self, index)


    def push(self, data):
        """
        push(M2kDigital self, VectorUS data)

        Parameters
        ----------
        data: std::vector< unsigned short,std::allocator< unsigned short > > const &

        """
        return _libm2k.M2kDigital_push(self, data)


    def pushBytes(self, data, nb_samples):
        """
        pushBytes(M2kDigital self, unsigned short * data, unsigned int nb_samples)

        Parameters
        ----------
        data: unsigned short *
        nb_samples: unsigned int

        """
        return _libm2k.M2kDigital_pushBytes(self, data, nb_samples)


    def setValueRaw(self, *args):
        """
        setValueRaw(M2kDigital self, libm2k::digital::DIO_CHANNEL index, libm2k::digital::DIO_LEVEL level)

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL
        level: enum libm2k::digital::DIO_LEVEL

        setValueRaw(M2kDigital self, unsigned int index, libm2k::digital::DIO_LEVEL level)

        Parameters
        ----------
        index: unsigned int
        level: enum libm2k::digital::DIO_LEVEL

        setValueRaw(M2kDigital self, libm2k::digital::DIO_CHANNEL index, bool level)

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL
        level: bool

        """
        return _libm2k.M2kDigital_setValueRaw(self, *args)


    def getValueRaw(self, *args):
        """
        getValueRaw(M2kDigital self, libm2k::digital::DIO_CHANNEL index) -> libm2k::digital::DIO_LEVEL

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL

        getValueRaw(M2kDigital self, unsigned int index) -> libm2k::digital::DIO_LEVEL

        Parameters
        ----------
        index: unsigned int

        """
        return _libm2k.M2kDigital_getValueRaw(self, *args)


    def stopBufferOut(self):
        """
        stopBufferOut(M2kDigital self)

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_stopBufferOut(self)


    def startAcquisition(self, nb_samples):
        """
        startAcquisition(M2kDigital self, unsigned int nb_samples)

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kDigital_startAcquisition(self, nb_samples)


    def stopAcquisition(self):
        """
        stopAcquisition(M2kDigital self)

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_stopAcquisition(self)


    def cancelAcquisition(self):
        """
        cancelAcquisition(M2kDigital self)

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_cancelAcquisition(self)


    def cancelBufferOut(self):
        """
        cancelBufferOut(M2kDigital self)

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_cancelBufferOut(self)


    def getSamplesP(self, nb_samples):
        """
        getSamplesP(M2kDigital self, unsigned int nb_samples) -> unsigned short const *

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.M2kDigital_getSamplesP(self, nb_samples)


    def enableChannel(self, *args):
        """
        enableChannel(M2kDigital self, unsigned int index, bool enable)

        Parameters
        ----------
        index: unsigned int
        enable: bool

        enableChannel(M2kDigital self, libm2k::digital::DIO_CHANNEL index, bool enable)

        Parameters
        ----------
        index: enum libm2k::digital::DIO_CHANNEL
        enable: bool

        """
        return _libm2k.M2kDigital_enableChannel(self, *args)


    def enableAllOut(self, enable):
        """
        enableAllOut(M2kDigital self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _libm2k.M2kDigital_enableAllOut(self, enable)


    def anyChannelEnabled(self, dir):
        """
        anyChannelEnabled(M2kDigital self, libm2k::digital::DIO_DIRECTION dir) -> bool

        Parameters
        ----------
        dir: enum libm2k::digital::DIO_DIRECTION

        """
        return _libm2k.M2kDigital_anyChannelEnabled(self, dir)


    def setOutputMode(self, *args):
        """
        setOutputMode(M2kDigital self, libm2k::digital::DIO_CHANNEL chn, libm2k::digital::DIO_MODE mode)

        Parameters
        ----------
        chn: enum libm2k::digital::DIO_CHANNEL
        mode: enum libm2k::digital::DIO_MODE

        setOutputMode(M2kDigital self, unsigned int chn, libm2k::digital::DIO_MODE mode)

        Parameters
        ----------
        chn: unsigned int
        mode: enum libm2k::digital::DIO_MODE

        """
        return _libm2k.M2kDigital_setOutputMode(self, *args)


    def getOutputMode(self, *args):
        """
        getOutputMode(M2kDigital self, libm2k::digital::DIO_CHANNEL chn) -> libm2k::digital::DIO_MODE

        Parameters
        ----------
        chn: enum libm2k::digital::DIO_CHANNEL

        getOutputMode(M2kDigital self, unsigned int chn) -> libm2k::digital::DIO_MODE

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2kDigital_getOutputMode(self, *args)


    def setSampleRateIn(self, samplerate):
        """
        setSampleRateIn(M2kDigital self, double samplerate) -> double

        Parameters
        ----------
        samplerate: double

        """
        return _libm2k.M2kDigital_setSampleRateIn(self, samplerate)


    def setSampleRateOut(self, samplerate):
        """
        setSampleRateOut(M2kDigital self, double samplerate) -> double

        Parameters
        ----------
        samplerate: double

        """
        return _libm2k.M2kDigital_setSampleRateOut(self, samplerate)


    def getSampleRateIn(self):
        """
        getSampleRateIn(M2kDigital self) -> double

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getSampleRateIn(self)


    def getSampleRateOut(self):
        """
        getSampleRateOut(M2kDigital self) -> double

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getSampleRateOut(self)


    def getCyclic(self):
        """
        getCyclic(M2kDigital self) -> bool

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getCyclic(self)


    def setCyclic(self, cyclic):
        """
        setCyclic(M2kDigital self, bool cyclic)

        Parameters
        ----------
        cyclic: bool

        """
        return _libm2k.M2kDigital_setCyclic(self, cyclic)


    def getTrigger(self):
        """
        getTrigger(M2kDigital self) -> M2kHardwareTrigger

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getTrigger(self)


    def setKernelBuffersCountIn(self, count):
        """
        setKernelBuffersCountIn(M2kDigital self, unsigned int count)

        Parameters
        ----------
        count: unsigned int

        """
        return _libm2k.M2kDigital_setKernelBuffersCountIn(self, count)


    def setKernelBuffersCountOut(self, count):
        """
        setKernelBuffersCountOut(M2kDigital self, unsigned int count)

        Parameters
        ----------
        count: unsigned int

        """
        return _libm2k.M2kDigital_setKernelBuffersCountOut(self, count)


    def getIioObjects(self):
        """
        getIioObjects(M2kDigital self) -> IIO_OBJECTS

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getIioObjects(self)


    def getNbChannelsIn(self):
        """
        getNbChannelsIn(M2kDigital self) -> unsigned int

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getNbChannelsIn(self)


    def getNbChannelsOut(self):
        """
        getNbChannelsOut(M2kDigital self) -> unsigned int

        Parameters
        ----------
        self: libm2k::digital::M2kDigital *

        """
        return _libm2k.M2kDigital_getNbChannelsOut(self)


    def getSamples(self, *args):
        """
        getSamples(M2kDigital self, unsigned int nb_samples) -> VectorUS

        Parameters
        ----------
        nb_samples: unsigned int

        getSamples(M2kDigital self, VectorUS data, unsigned int nb_samples)

        Parameters
        ----------
        data: std::vector< unsigned short,std::allocator< unsigned short > > &
        nb_samples: unsigned int

        """
        return _libm2k.M2kDigital_getSamples(self, *args)

M2kDigital_swigregister = _libm2k.M2kDigital_swigregister
M2kDigital_swigregister(M2kDigital)

class Context(_object):
    """Proxy of C++ libm2k::context::Context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_Context
    __del__ = lambda self: None

    def reset(self):
        """
        reset(Context self)

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_reset(self)


    def deinitialize(self):
        """
        deinitialize(Context self)

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_deinitialize(self)


    def getUri(self):
        """
        getUri(Context self) -> std::string

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getUri(self)


    def getDMM(self, *args):
        """
        getDMM(Context self, unsigned int index) -> DMM

        Parameters
        ----------
        index: unsigned int

        getDMM(Context self, std::string name) -> DMM

        Parameters
        ----------
        name: std::string

        """
        return _libm2k.Context_getDMM(self, *args)


    def getAllDmm(self):
        """
        getAllDmm(Context self) -> DMMs

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getAllDmm(self)


    def getAvailableContextAttributes(self):
        """
        getAvailableContextAttributes(Context self) -> VectorStr

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getAvailableContextAttributes(self)


    def getContextAttributeValue(self, attr):
        """
        getContextAttributeValue(Context self, std::string attr) -> std::string

        Parameters
        ----------
        attr: std::string

        """
        return _libm2k.Context_getContextAttributeValue(self, attr)


    def getContextDescription(self):
        """
        getContextDescription(Context self) -> std::string

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getContextDescription(self)


    def getSerialNumber(self):
        """
        getSerialNumber(Context self) -> std::string

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getSerialNumber(self)


    def getAllDevices(self):
        """
        getAllDevices(Context self) -> std::unordered_set< std::string >

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getAllDevices(self)


    def toM2k(self):
        """
        toM2k(Context self) -> M2k

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_toM2k(self)


    def toLidar(self):
        """
        toLidar(Context self) -> Lidar

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_toLidar(self)


    def toGeneric(self):
        """
        toGeneric(Context self) -> Generic

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_toGeneric(self)


    def getDmmCount(self):
        """
        getDmmCount(Context self) -> unsigned int

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getDmmCount(self)


    def getFirmwareVersion(self):
        """
        getFirmwareVersion(Context self) -> std::string

        Parameters
        ----------
        self: libm2k::context::Context *

        """
        return _libm2k.Context_getFirmwareVersion(self)


    def setTimeout(self, timeout):
        """
        setTimeout(Context self, unsigned int timeout)

        Parameters
        ----------
        timeout: unsigned int

        """
        return _libm2k.Context_setTimeout(self, timeout)

Context_swigregister = _libm2k.Context_swigregister
Context_swigregister(Context)

CtxFMCOMMS = _libm2k.CtxFMCOMMS
CtxM2K = _libm2k.CtxM2K
CtxLIDAR = _libm2k.CtxLIDAR
Other = _libm2k.Other
class ContextBuilder(_object):
    """Proxy of C++ libm2k::context::ContextBuilder class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContextBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContextBuilder, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(libm2k::context::ContextBuilder self) -> ContextBuilder"""
        this = _libm2k.new_ContextBuilder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_ContextBuilder
    __del__ = lambda self: None

    def getContextsInfo():
        """getContextsInfo() -> std::vector< libm2k::CONTEXT_INFO *,std::allocator< libm2k::CONTEXT_INFO * > >"""
        return _libm2k.ContextBuilder_getContextsInfo()

    getContextsInfo = staticmethod(getContextsInfo)

    def getAllContexts():
        """getAllContexts() -> VectorStr"""
        return _libm2k.ContextBuilder_getAllContexts()

    getAllContexts = staticmethod(getAllContexts)

    def contextOpen(*args):
        """
        contextOpen(char const * arg1) -> Context

        Parameters
        ----------
        arg1: char const *

        contextOpen(iio_context * arg1, char const * arg2) -> Context

        Parameters
        ----------
        arg1: iio_context *
        arg2: char const *

        contextOpen() -> Context
        """
        return _libm2k.ContextBuilder_contextOpen(*args)

    contextOpen = staticmethod(contextOpen)

    def m2kOpen(*args):
        """
        m2kOpen(char const * arg1) -> M2k

        Parameters
        ----------
        arg1: char const *

        m2kOpen(iio_context * arg1, char const * arg2) -> M2k

        Parameters
        ----------
        arg1: iio_context *
        arg2: char const *

        m2kOpen() -> M2k
        """
        return _libm2k.ContextBuilder_m2kOpen(*args)

    m2kOpen = staticmethod(m2kOpen)

    def contextClose(arg1, deinit=True):
        """
        contextClose(Context arg1, bool deinit=True)

        Parameters
        ----------
        arg1: libm2k::context::Context *
        deinit: bool

        contextClose(Context arg1)

        Parameters
        ----------
        arg1: libm2k::context::Context *

        """
        return _libm2k.ContextBuilder_contextClose(arg1, deinit)

    contextClose = staticmethod(contextClose)

    def contextCloseAll():
        """contextCloseAll()"""
        return _libm2k.ContextBuilder_contextCloseAll()

    contextCloseAll = staticmethod(contextCloseAll)

    def getVersion():
        """getVersion() -> std::string"""
        return _libm2k.ContextBuilder_getVersion()

    getVersion = staticmethod(getVersion)
ContextBuilder_swigregister = _libm2k.ContextBuilder_swigregister
ContextBuilder_swigregister(ContextBuilder)

def ContextBuilder_getContextsInfo():
    """ContextBuilder_getContextsInfo() -> std::vector< libm2k::CONTEXT_INFO *,std::allocator< libm2k::CONTEXT_INFO * > >"""
    return _libm2k.ContextBuilder_getContextsInfo()

def ContextBuilder_getAllContexts():
    """ContextBuilder_getAllContexts() -> VectorStr"""
    return _libm2k.ContextBuilder_getAllContexts()

def ContextBuilder_contextOpen(*args):
    """
    contextOpen(char const * arg1) -> Context

    Parameters
    ----------
    arg1: char const *

    contextOpen(iio_context * arg1, char const * arg2) -> Context

    Parameters
    ----------
    arg1: iio_context *
    arg2: char const *

    ContextBuilder_contextOpen() -> Context
    """
    return _libm2k.ContextBuilder_contextOpen(*args)

def ContextBuilder_m2kOpen(*args):
    """
    m2kOpen(char const * arg1) -> M2k

    Parameters
    ----------
    arg1: char const *

    m2kOpen(iio_context * arg1, char const * arg2) -> M2k

    Parameters
    ----------
    arg1: iio_context *
    arg2: char const *

    ContextBuilder_m2kOpen() -> M2k
    """
    return _libm2k.ContextBuilder_m2kOpen(*args)

def ContextBuilder_contextClose(arg1, deinit=True):
    """
    contextClose(Context arg1, bool deinit=True)

    Parameters
    ----------
    arg1: libm2k::context::Context *
    deinit: bool

    ContextBuilder_contextClose(Context arg2)

    Parameters
    ----------
    arg1: libm2k::context::Context *

    """
    return _libm2k.ContextBuilder_contextClose(arg1, deinit)

def ContextBuilder_contextCloseAll():
    """ContextBuilder_contextCloseAll()"""
    return _libm2k.ContextBuilder_contextCloseAll()

def ContextBuilder_getVersion():
    """ContextBuilder_getVersion() -> std::string"""
    return _libm2k.ContextBuilder_getVersion()


def contextOpen(*args):
    """
    contextOpen() -> Context
    contextOpen(char const * uri) -> Context

    Parameters
    ----------
    uri: char const *

    contextOpen(iio_context * ctx, char const * uri) -> Context

    Parameters
    ----------
    ctx: iio_context *
    uri: char const *

    """
    return _libm2k.contextOpen(*args)

def m2kOpen(*args):
    """
    m2kOpen(char const * uri) -> M2k

    Parameters
    ----------
    uri: char const *

    m2kOpen(iio_context * ctx, char const * uri) -> M2k

    Parameters
    ----------
    ctx: iio_context *
    uri: char const *

    m2kOpen() -> M2k
    """
    return _libm2k.m2kOpen(*args)

def getContextsInfo():
    """getContextsInfo() -> std::vector< libm2k::CONTEXT_INFO *,std::allocator< libm2k::CONTEXT_INFO * > >"""
    return _libm2k.getContextsInfo()

def getAllContexts():
    """getAllContexts() -> VectorStr"""
    return _libm2k.getAllContexts()

def contextClose(ctx, deinit=True):
    """
    contextClose(Context ctx, bool deinit=True)

    Parameters
    ----------
    ctx: libm2k::context::Context *
    deinit: bool

    contextClose(Context ctx)

    Parameters
    ----------
    ctx: libm2k::context::Context *

    """
    return _libm2k.contextClose(ctx, deinit)

def contextCloseAll():
    """contextCloseAll()"""
    return _libm2k.contextCloseAll()

def getVersion():
    """getVersion() -> std::string"""
    return _libm2k.getVersion()
class FMCOMMS(_object):
    """Proxy of C++ FMCOMMS class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMCOMMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMCOMMS, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FMCOMMS self) -> FMCOMMS"""
        this = _libm2k.new_FMCOMMS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_FMCOMMS
    __del__ = lambda self: None
FMCOMMS_swigregister = _libm2k.FMCOMMS_swigregister
FMCOMMS_swigregister(FMCOMMS)

class Logger(_object):
    """Proxy of C++ libm2k::Logger class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getInstance():
        """getInstance() -> Logger"""
        return _libm2k.Logger_getInstance()

    getInstance = staticmethod(getInstance)

    def warn(self, message):
        """
        warn(Logger self, std::string message)

        Parameters
        ----------
        message: std::string

        """
        return _libm2k.Logger_warn(self, message)

    __swig_destroy__ = _libm2k.delete_Logger
    __del__ = lambda self: None
Logger_swigregister = _libm2k.Logger_swigregister
Logger_swigregister(Logger)

def Logger_getInstance():
    """Logger_getInstance() -> Logger"""
    return _libm2k.Logger_getInstance()

class M2kCalibration(_object):
    """Proxy of C++ libm2k::M2kCalibration class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kCalibration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2kCalibration
    __del__ = lambda self: None

    def initialize(self):
        """
        initialize(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_initialize(self)


    def isInitialized(self):
        """
        isInitialized(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration const *

        """
        return _libm2k.M2kCalibration_isInitialized(self)


    def calibrateAll(self):
        """
        calibrateAll(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_calibrateAll(self)


    def calibrateADC(self):
        """
        calibrateADC(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_calibrateADC(self)


    def calibrateDAC(self):
        """
        calibrateDAC(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_calibrateDAC(self)


    def cancelCalibration(self):
        """
        cancelCalibration(M2kCalibration self)

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_cancelCalibration(self)


    def getAdcOffset(self, channel):
        """
        getAdcOffset(M2kCalibration self, unsigned int channel) -> int

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kCalibration_getAdcOffset(self, channel)


    def getDacOffset(self, channel):
        """
        getDacOffset(M2kCalibration self, unsigned int channel) -> int

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kCalibration_getDacOffset(self, channel)


    def getAdcGain(self, channel):
        """
        getAdcGain(M2kCalibration self, unsigned int channel) -> double

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kCalibration_getAdcGain(self, channel)


    def getDacGain(self, channel):
        """
        getDacGain(M2kCalibration self, unsigned int channel) -> double

        Parameters
        ----------
        channel: unsigned int

        """
        return _libm2k.M2kCalibration_getDacGain(self, channel)


    def resetCalibration(self):
        """
        resetCalibration(M2kCalibration self) -> bool

        Parameters
        ----------
        self: libm2k::M2kCalibration *

        """
        return _libm2k.M2kCalibration_resetCalibration(self)


    def setDacGain(self, chn, gain):
        """
        setDacGain(M2kCalibration self, unsigned int chn, double gain)

        Parameters
        ----------
        chn: unsigned int
        gain: double

        """
        return _libm2k.M2kCalibration_setDacGain(self, chn, gain)


    def setDacOffset(self, chn, offset):
        """
        setDacOffset(M2kCalibration self, unsigned int chn, int offset)

        Parameters
        ----------
        chn: unsigned int
        offset: int

        """
        return _libm2k.M2kCalibration_setDacOffset(self, chn, offset)


    def setAdcOffset(self, chn, offset):
        """
        setAdcOffset(M2kCalibration self, unsigned int chn, int offset)

        Parameters
        ----------
        chn: unsigned int
        offset: int

        """
        return _libm2k.M2kCalibration_setAdcOffset(self, chn, offset)


    def setAdcGain(self, chn, gain):
        """
        setAdcGain(M2kCalibration self, unsigned int chn, double gain)

        Parameters
        ----------
        chn: unsigned int
        gain: double

        """
        return _libm2k.M2kCalibration_setAdcGain(self, chn, gain)

M2kCalibration_swigregister = _libm2k.M2kCalibration_swigregister
M2kCalibration_swigregister(M2kCalibration)

class no_device_exception(_object):
    """Proxy of C++ no_device_exception class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, no_device_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, no_device_exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(no_device_exception self, std::string const & what) -> no_device_exception

        Parameters
        ----------
        what: std::string const &

        __init__(no_device_exception self, char const * what) -> no_device_exception

        Parameters
        ----------
        what: char const *

        """
        this = _libm2k.new_no_device_exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_no_device_exception
    __del__ = lambda self: None
no_device_exception_swigregister = _libm2k.no_device_exception_swigregister
no_device_exception_swigregister(no_device_exception)

class instrument_already_in_use_exception(_object):
    """Proxy of C++ instrument_already_in_use_exception class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, instrument_already_in_use_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, instrument_already_in_use_exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(instrument_already_in_use_exception self, std::string const & what) -> instrument_already_in_use_exception

        Parameters
        ----------
        what: std::string const &

        __init__(instrument_already_in_use_exception self, char const * what) -> instrument_already_in_use_exception

        Parameters
        ----------
        what: char const *

        """
        this = _libm2k.new_instrument_already_in_use_exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_instrument_already_in_use_exception
    __del__ = lambda self: None
instrument_already_in_use_exception_swigregister = _libm2k.instrument_already_in_use_exception_swigregister
instrument_already_in_use_exception_swigregister(instrument_already_in_use_exception)

class invalid_parameter_exception(_object):
    """Proxy of C++ invalid_parameter_exception class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, invalid_parameter_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, invalid_parameter_exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(invalid_parameter_exception self, std::string const & what) -> invalid_parameter_exception

        Parameters
        ----------
        what: std::string const &

        __init__(invalid_parameter_exception self, char const * what) -> invalid_parameter_exception

        Parameters
        ----------
        what: char const *

        """
        this = _libm2k.new_invalid_parameter_exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_invalid_parameter_exception
    __del__ = lambda self: None
invalid_parameter_exception_swigregister = _libm2k.invalid_parameter_exception_swigregister
invalid_parameter_exception_swigregister(invalid_parameter_exception)

class timeout_exception(_object):
    """Proxy of C++ timeout_exception class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeout_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeout_exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(timeout_exception self, std::string const & what) -> timeout_exception

        Parameters
        ----------
        what: std::string const &

        __init__(timeout_exception self, char const * what) -> timeout_exception

        Parameters
        ----------
        what: char const *

        """
        this = _libm2k.new_timeout_exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libm2k.delete_timeout_exception
    __del__ = lambda self: None
timeout_exception_swigregister = _libm2k.timeout_exception_swigregister
timeout_exception_swigregister(timeout_exception)


def throw_exception(exc_type, exception):
    """
    throw_exception(libm2k::M2K_EXCEPTION exc_type, std::string exception)

    Parameters
    ----------
    exc_type: enum libm2k::M2K_EXCEPTION
    exception: std::string

    """
    return _libm2k.throw_exception(exc_type, exception)
class M2k(Context):
    """Proxy of C++ libm2k::context::M2k class."""

    __swig_setmethods__ = {}
    for _s in [Context]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2k, name, value)
    __swig_getmethods__ = {}
    for _s in [Context]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, M2k, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_M2k
    __del__ = lambda self: None

    def reset(self):
        """
        reset(M2k self)

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_reset(self)


    def deinitialize(self):
        """
        deinitialize(M2k self)

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_deinitialize(self)


    def calibrate(self):
        """
        calibrate(M2k self) -> bool

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_calibrate(self)


    def calibrateADC(self):
        """
        calibrateADC(M2k self) -> bool

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_calibrateADC(self)


    def calibrateDAC(self):
        """
        calibrateDAC(M2k self) -> bool

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_calibrateDAC(self)


    def resetCalibration(self):
        """
        resetCalibration(M2k self) -> bool

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_resetCalibration(self)


    def getDigital(self):
        """
        getDigital(M2k self) -> M2kDigital

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getDigital(self)


    def getPowerSupply(self):
        """
        getPowerSupply(M2k self) -> M2kPowerSupply

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getPowerSupply(self)


    def getAnalogIn(self, *args):
        """
        getAnalogIn(M2k self) -> M2kAnalogIn
        getAnalogIn(M2k self, std::string dev_name) -> M2kAnalogIn

        Parameters
        ----------
        dev_name: std::string

        """
        return _libm2k.M2k_getAnalogIn(self, *args)


    def getAnalogOut(self):
        """
        getAnalogOut(M2k self) -> M2kAnalogOut

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getAnalogOut(self)


    def getAllAnalogIn(self):
        """
        getAllAnalogIn(M2k self) -> M2kAnalogIns

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getAllAnalogIn(self)


    def getAllAnalogOut(self):
        """
        getAllAnalogOut(M2k self) -> M2kAnalogOuts

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getAllAnalogOut(self)


    def getDacCalibrationOffset(self, chn):
        """
        getDacCalibrationOffset(M2k self, unsigned int chn) -> int

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2k_getDacCalibrationOffset(self, chn)


    def getDacCalibrationGain(self, chn):
        """
        getDacCalibrationGain(M2k self, unsigned int chn) -> double

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2k_getDacCalibrationGain(self, chn)


    def getAdcCalibrationOffset(self, chn):
        """
        getAdcCalibrationOffset(M2k self, unsigned int chn) -> int

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2k_getAdcCalibrationOffset(self, chn)


    def getAdcCalibrationGain(self, chn):
        """
        getAdcCalibrationGain(M2k self, unsigned int chn) -> double

        Parameters
        ----------
        chn: unsigned int

        """
        return _libm2k.M2k_getAdcCalibrationGain(self, chn)


    def setDacCalibrationOffset(self, chn, offset):
        """
        setDacCalibrationOffset(M2k self, unsigned int chn, int offset)

        Parameters
        ----------
        chn: unsigned int
        offset: int

        """
        return _libm2k.M2k_setDacCalibrationOffset(self, chn, offset)


    def setDacCalibrationGain(self, chn, gain):
        """
        setDacCalibrationGain(M2k self, unsigned int chn, double gain)

        Parameters
        ----------
        chn: unsigned int
        gain: double

        """
        return _libm2k.M2k_setDacCalibrationGain(self, chn, gain)


    def setAdcCalibrationOffset(self, chn, offset):
        """
        setAdcCalibrationOffset(M2k self, unsigned int chn, int offset)

        Parameters
        ----------
        chn: unsigned int
        offset: int

        """
        return _libm2k.M2k_setAdcCalibrationOffset(self, chn, offset)


    def setAdcCalibrationGain(self, chn, gain):
        """
        setAdcCalibrationGain(M2k self, unsigned int chn, double gain)

        Parameters
        ----------
        chn: unsigned int
        gain: double

        """
        return _libm2k.M2k_setAdcCalibrationGain(self, chn, gain)


    def setLed(self, on):
        """
        setLed(M2k self, bool on)

        Parameters
        ----------
        on: bool

        """
        return _libm2k.M2k_setLed(self, on)


    def getLed(self):
        """
        getLed(M2k self) -> bool

        Parameters
        ----------
        self: libm2k::context::M2k *

        """
        return _libm2k.M2k_getLed(self)

M2k_swigregister = _libm2k.M2k_swigregister
M2k_swigregister(M2k)
cvar = _libm2k.cvar

class Generic(Context):
    """Proxy of C++ libm2k::context::Generic class."""

    __swig_setmethods__ = {}
    for _s in [Context]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Generic, name, value)
    __swig_getmethods__ = {}
    for _s in [Context]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Generic, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_Generic
    __del__ = lambda self: None

    def getAnalogIn(self, *args):
        """
        getAnalogIn(Generic self, unsigned int arg2) -> GenericAnalogIn

        Parameters
        ----------
        arg2: unsigned int

        getAnalogIn(Generic self, std::string arg2) -> GenericAnalogIn

        Parameters
        ----------
        arg2: std::string

        """
        return _libm2k.Generic_getAnalogIn(self, *args)


    def getAnalogOut(self, *args):
        """
        getAnalogOut(Generic self, unsigned int arg2) -> GenericAnalogOut

        Parameters
        ----------
        arg2: unsigned int

        getAnalogOut(Generic self, std::string arg2) -> GenericAnalogOut

        Parameters
        ----------
        arg2: std::string

        """
        return _libm2k.Generic_getAnalogOut(self, *args)


    def getAnalogInCount(self):
        """
        getAnalogInCount(Generic self) -> unsigned int

        Parameters
        ----------
        self: libm2k::context::Generic *

        """
        return _libm2k.Generic_getAnalogInCount(self)


    def getAnalogOutCount(self):
        """
        getAnalogOutCount(Generic self) -> unsigned int

        Parameters
        ----------
        self: libm2k::context::Generic *

        """
        return _libm2k.Generic_getAnalogOutCount(self)

Generic_swigregister = _libm2k.Generic_swigregister
Generic_swigregister(Generic)

class Lidar(Context):
    """Proxy of C++ libm2k::context::Lidar class."""

    __swig_setmethods__ = {}
    for _s in [Context]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lidar, name, value)
    __swig_getmethods__ = {}
    for _s in [Context]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lidar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libm2k.delete_Lidar
    __del__ = lambda self: None

    def channelEnableDisable(self, channel, enable):
        """
        channelEnableDisable(Lidar self, std::string channel, bool enable)

        Parameters
        ----------
        channel: std::string
        enable: bool

        """
        return _libm2k.Lidar_channelEnableDisable(self, channel, enable)


    def readChannels(self, nb_samples):
        """
        readChannels(Lidar self, unsigned int nb_samples) -> std::map< std::string,std::vector< int8_t > >

        Parameters
        ----------
        nb_samples: unsigned int

        """
        return _libm2k.Lidar_readChannels(self, nb_samples)


    def setApdBias(self, bias):
        """
        setApdBias(Lidar self, unsigned int bias)

        Parameters
        ----------
        bias: unsigned int

        """
        return _libm2k.Lidar_setApdBias(self, bias)


    def setTiltVoltage(self, voltage):
        """
        setTiltVoltage(Lidar self, unsigned int voltage)

        Parameters
        ----------
        voltage: unsigned int

        """
        return _libm2k.Lidar_setTiltVoltage(self, voltage)


    def laserEnable(self):
        """
        laserEnable(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_laserEnable(self)


    def laserDisable(self):
        """
        laserDisable(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_laserDisable(self)


    def setLaserPulseWidth(self, pulse_width):
        """
        setLaserPulseWidth(Lidar self, long long pulse_width)

        Parameters
        ----------
        pulse_width: long long

        """
        return _libm2k.Lidar_setLaserPulseWidth(self, pulse_width)


    def setLaserFrequency(self, frequency):
        """
        setLaserFrequency(Lidar self, long long frequency)

        Parameters
        ----------
        frequency: long long

        """
        return _libm2k.Lidar_setLaserFrequency(self, frequency)


    def enableChannelSequencer(self):
        """
        enableChannelSequencer(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_enableChannelSequencer(self)


    def disableChannelSequencer(self):
        """
        disableChannelSequencer(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_disableChannelSequencer(self)


    def setSequencerPulseDelay(self, ns):
        """
        setSequencerPulseDelay(Lidar self, long long ns)

        Parameters
        ----------
        ns: long long

        """
        return _libm2k.Lidar_setSequencerPulseDelay(self, ns)


    def setChannelSequencerOpModeManual(self):
        """
        setChannelSequencerOpModeManual(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_setChannelSequencerOpModeManual(self)


    def setChannelSequencerOpModeAuto(self):
        """
        setChannelSequencerOpModeAuto(Lidar self)

        Parameters
        ----------
        self: libm2k::context::Lidar *

        """
        return _libm2k.Lidar_setChannelSequencerOpModeAuto(self)


    def setChannelSequencerOrderAutoMode(self, order):
        """
        setChannelSequencerOrderAutoMode(Lidar self, char const * order)

        Parameters
        ----------
        order: char const *

        """
        return _libm2k.Lidar_setChannelSequencerOrderAutoMode(self, order)


    def setChannelSequencerOrderManualMode(self, order):
        """
        setChannelSequencerOrderManualMode(Lidar self, char const * order)

        Parameters
        ----------
        order: char const *

        """
        return _libm2k.Lidar_setChannelSequencerOrderManualMode(self, order)

Lidar_swigregister = _libm2k.Lidar_swigregister
Lidar_swigregister(Lidar)

class DMMReading(_object):
    """Proxy of C++ std::vector<(libm2k::analog::DMM_READING)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMMReading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMMReading, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(DMMReading self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(DMMReading self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading___nonzero__(self)


    def __bool__(self):
        """
        __bool__(DMMReading self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading___bool__(self)


    def __len__(self):
        """
        __len__(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i, std::vector< libm2k::analog::DMM_READING >::difference_type j) -> DMMReading

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type
        j: std::vector< libm2k::analog::DMM_READING >::difference_type

        """
        return _libm2k.DMMReading___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i, std::vector< libm2k::analog::DMM_READING >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type
        j: std::vector< libm2k::analog::DMM_READING >::difference_type

        __setslice__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i, std::vector< libm2k::analog::DMM_READING >::difference_type j, DMMReading v)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type
        j: std::vector< libm2k::analog::DMM_READING >::difference_type
        v: std::vector< libm2k::analog::DMM_READING,std::allocator< libm2k::analog::DMM_READING > > const &

        """
        return _libm2k.DMMReading___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i, std::vector< libm2k::analog::DMM_READING >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type
        j: std::vector< libm2k::analog::DMM_READING >::difference_type

        """
        return _libm2k.DMMReading___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type

        __delitem__(DMMReading self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.DMMReading___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DMMReading self, PySliceObject * slice) -> DMMReading

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i) -> DMM_READING

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type

        """
        return _libm2k.DMMReading___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DMMReading self, PySliceObject * slice, DMMReading v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::analog::DMM_READING,std::allocator< libm2k::analog::DMM_READING > > const &

        __setitem__(DMMReading self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DMMReading self, std::vector< libm2k::analog::DMM_READING >::difference_type i, DMM_READING x)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM_READING >::difference_type
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading___setitem__(self, *args)


    def pop(self):
        """
        pop(DMMReading self) -> DMM_READING

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_pop(self)


    def append(self, x):
        """
        append(DMMReading self, DMM_READING x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading_append(self, x)


    def empty(self):
        """
        empty(DMMReading self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_empty(self)


    def size(self):
        """
        size(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_size(self)


    def swap(self, v):
        """
        swap(DMMReading self, DMMReading v)

        Parameters
        ----------
        v: std::vector< libm2k::analog::DMM_READING > &

        """
        return _libm2k.DMMReading_swap(self, v)


    def begin(self):
        """
        begin(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_begin(self)


    def end(self):
        """
        end(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_end(self)


    def rbegin(self):
        """
        rbegin(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_rbegin(self)


    def rend(self):
        """
        rend(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_rend(self)


    def clear(self):
        """
        clear(DMMReading self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_clear(self)


    def get_allocator(self):
        """
        get_allocator(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_get_allocator(self)


    def pop_back(self):
        """
        pop_back(DMMReading self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > *

        """
        return _libm2k.DMMReading_pop_back(self)


    def erase(self, *args):
        """
        erase(DMMReading self, std::vector< libm2k::analog::DMM_READING >::iterator pos) -> std::vector< libm2k::analog::DMM_READING >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM_READING >::iterator

        erase(DMMReading self, std::vector< libm2k::analog::DMM_READING >::iterator first, std::vector< libm2k::analog::DMM_READING >::iterator last) -> std::vector< libm2k::analog::DMM_READING >::iterator

        Parameters
        ----------
        first: std::vector< libm2k::analog::DMM_READING >::iterator
        last: std::vector< libm2k::analog::DMM_READING >::iterator

        """
        return _libm2k.DMMReading_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(libm2k::analog::DMM_READING)> self) -> DMMReading
        __init__(std::vector<(libm2k::analog::DMM_READING)> self, DMMReading arg2) -> DMMReading

        Parameters
        ----------
        arg2: std::vector< libm2k::analog::DMM_READING > const &

        __init__(std::vector<(libm2k::analog::DMM_READING)> self, std::vector< libm2k::analog::DMM_READING >::size_type size) -> DMMReading

        Parameters
        ----------
        size: std::vector< libm2k::analog::DMM_READING >::size_type

        __init__(std::vector<(libm2k::analog::DMM_READING)> self, std::vector< libm2k::analog::DMM_READING >::size_type size, DMM_READING value) -> DMMReading

        Parameters
        ----------
        size: std::vector< libm2k::analog::DMM_READING >::size_type
        value: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        this = _libm2k.new_DMMReading(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(DMMReading self, DMM_READING x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading_push_back(self, x)


    def front(self):
        """
        front(DMMReading self) -> DMM_READING

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_front(self)


    def back(self):
        """
        back(DMMReading self) -> DMM_READING

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_back(self)


    def assign(self, n, x):
        """
        assign(DMMReading self, std::vector< libm2k::analog::DMM_READING >::size_type n, DMM_READING x)

        Parameters
        ----------
        n: std::vector< libm2k::analog::DMM_READING >::size_type
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DMMReading self, std::vector< libm2k::analog::DMM_READING >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::DMM_READING >::size_type

        resize(DMMReading self, std::vector< libm2k::analog::DMM_READING >::size_type new_size, DMM_READING x)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::DMM_READING >::size_type
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading_resize(self, *args)


    def insert(self, *args):
        """
        insert(DMMReading self, std::vector< libm2k::analog::DMM_READING >::iterator pos, DMM_READING x) -> std::vector< libm2k::analog::DMM_READING >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM_READING >::iterator
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        insert(DMMReading self, std::vector< libm2k::analog::DMM_READING >::iterator pos, std::vector< libm2k::analog::DMM_READING >::size_type n, DMM_READING x)

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM_READING >::iterator
        n: std::vector< libm2k::analog::DMM_READING >::size_type
        x: std::vector< libm2k::analog::DMM_READING >::value_type const &

        """
        return _libm2k.DMMReading_insert(self, *args)


    def reserve(self, n):
        """
        reserve(DMMReading self, std::vector< libm2k::analog::DMM_READING >::size_type n)

        Parameters
        ----------
        n: std::vector< libm2k::analog::DMM_READING >::size_type

        """
        return _libm2k.DMMReading_reserve(self, n)


    def capacity(self):
        """
        capacity(DMMReading self) -> std::vector< libm2k::analog::DMM_READING >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM_READING > const *

        """
        return _libm2k.DMMReading_capacity(self)

    __swig_destroy__ = _libm2k.delete_DMMReading
    __del__ = lambda self: None
DMMReading_swigregister = _libm2k.DMMReading_swigregister
DMMReading_swigregister(DMMReading)

class DMMs(_object):
    """Proxy of C++ std::vector<(p.libm2k::analog::DMM)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMMs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMMs, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(DMMs self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(DMMs self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs___nonzero__(self)


    def __bool__(self):
        """
        __bool__(DMMs self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs___bool__(self)


    def __len__(self):
        """
        __len__(DMMs self) -> std::vector< libm2k::analog::DMM * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i, std::vector< libm2k::analog::DMM * >::difference_type j) -> DMMs

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type
        j: std::vector< libm2k::analog::DMM * >::difference_type

        """
        return _libm2k.DMMs___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i, std::vector< libm2k::analog::DMM * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type
        j: std::vector< libm2k::analog::DMM * >::difference_type

        __setslice__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i, std::vector< libm2k::analog::DMM * >::difference_type j, DMMs v)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type
        j: std::vector< libm2k::analog::DMM * >::difference_type
        v: std::vector< libm2k::analog::DMM *,std::allocator< libm2k::analog::DMM * > > const &

        """
        return _libm2k.DMMs___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i, std::vector< libm2k::analog::DMM * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type
        j: std::vector< libm2k::analog::DMM * >::difference_type

        """
        return _libm2k.DMMs___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type

        __delitem__(DMMs self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.DMMs___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DMMs self, PySliceObject * slice) -> DMMs

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i) -> DMM

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type

        """
        return _libm2k.DMMs___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DMMs self, PySliceObject * slice, DMMs v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::analog::DMM *,std::allocator< libm2k::analog::DMM * > > const &

        __setitem__(DMMs self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DMMs self, std::vector< libm2k::analog::DMM * >::difference_type i, DMM x)

        Parameters
        ----------
        i: std::vector< libm2k::analog::DMM * >::difference_type
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs___setitem__(self, *args)


    def pop(self):
        """
        pop(DMMs self) -> DMM

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_pop(self)


    def append(self, x):
        """
        append(DMMs self, DMM x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs_append(self, x)


    def empty(self):
        """
        empty(DMMs self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_empty(self)


    def size(self):
        """
        size(DMMs self) -> std::vector< libm2k::analog::DMM * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_size(self)


    def swap(self, v):
        """
        swap(DMMs self, DMMs v)

        Parameters
        ----------
        v: std::vector< libm2k::analog::DMM * > &

        """
        return _libm2k.DMMs_swap(self, v)


    def begin(self):
        """
        begin(DMMs self) -> std::vector< libm2k::analog::DMM * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_begin(self)


    def end(self):
        """
        end(DMMs self) -> std::vector< libm2k::analog::DMM * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_end(self)


    def rbegin(self):
        """
        rbegin(DMMs self) -> std::vector< libm2k::analog::DMM * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_rbegin(self)


    def rend(self):
        """
        rend(DMMs self) -> std::vector< libm2k::analog::DMM * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_rend(self)


    def clear(self):
        """
        clear(DMMs self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_clear(self)


    def get_allocator(self):
        """
        get_allocator(DMMs self) -> std::vector< libm2k::analog::DMM * >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_get_allocator(self)


    def pop_back(self):
        """
        pop_back(DMMs self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > *

        """
        return _libm2k.DMMs_pop_back(self)


    def erase(self, *args):
        """
        erase(DMMs self, std::vector< libm2k::analog::DMM * >::iterator pos) -> std::vector< libm2k::analog::DMM * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM * >::iterator

        erase(DMMs self, std::vector< libm2k::analog::DMM * >::iterator first, std::vector< libm2k::analog::DMM * >::iterator last) -> std::vector< libm2k::analog::DMM * >::iterator

        Parameters
        ----------
        first: std::vector< libm2k::analog::DMM * >::iterator
        last: std::vector< libm2k::analog::DMM * >::iterator

        """
        return _libm2k.DMMs_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.libm2k::analog::DMM)> self) -> DMMs
        __init__(std::vector<(p.libm2k::analog::DMM)> self, DMMs arg2) -> DMMs

        Parameters
        ----------
        arg2: std::vector< libm2k::analog::DMM * > const &

        __init__(std::vector<(p.libm2k::analog::DMM)> self, std::vector< libm2k::analog::DMM * >::size_type size) -> DMMs

        Parameters
        ----------
        size: std::vector< libm2k::analog::DMM * >::size_type

        __init__(std::vector<(p.libm2k::analog::DMM)> self, std::vector< libm2k::analog::DMM * >::size_type size, DMM value) -> DMMs

        Parameters
        ----------
        size: std::vector< libm2k::analog::DMM * >::size_type
        value: std::vector< libm2k::analog::DMM * >::value_type

        """
        this = _libm2k.new_DMMs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(DMMs self, DMM x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs_push_back(self, x)


    def front(self):
        """
        front(DMMs self) -> DMM

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_front(self)


    def back(self):
        """
        back(DMMs self) -> DMM

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_back(self)


    def assign(self, n, x):
        """
        assign(DMMs self, std::vector< libm2k::analog::DMM * >::size_type n, DMM x)

        Parameters
        ----------
        n: std::vector< libm2k::analog::DMM * >::size_type
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DMMs self, std::vector< libm2k::analog::DMM * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::DMM * >::size_type

        resize(DMMs self, std::vector< libm2k::analog::DMM * >::size_type new_size, DMM x)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::DMM * >::size_type
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs_resize(self, *args)


    def insert(self, *args):
        """
        insert(DMMs self, std::vector< libm2k::analog::DMM * >::iterator pos, DMM x) -> std::vector< libm2k::analog::DMM * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM * >::iterator
        x: std::vector< libm2k::analog::DMM * >::value_type

        insert(DMMs self, std::vector< libm2k::analog::DMM * >::iterator pos, std::vector< libm2k::analog::DMM * >::size_type n, DMM x)

        Parameters
        ----------
        pos: std::vector< libm2k::analog::DMM * >::iterator
        n: std::vector< libm2k::analog::DMM * >::size_type
        x: std::vector< libm2k::analog::DMM * >::value_type

        """
        return _libm2k.DMMs_insert(self, *args)


    def reserve(self, n):
        """
        reserve(DMMs self, std::vector< libm2k::analog::DMM * >::size_type n)

        Parameters
        ----------
        n: std::vector< libm2k::analog::DMM * >::size_type

        """
        return _libm2k.DMMs_reserve(self, n)


    def capacity(self):
        """
        capacity(DMMs self) -> std::vector< libm2k::analog::DMM * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::DMM * > const *

        """
        return _libm2k.DMMs_capacity(self)

    __swig_destroy__ = _libm2k.delete_DMMs
    __del__ = lambda self: None
DMMs_swigregister = _libm2k.DMMs_swigregister
DMMs_swigregister(DMMs)

class M2kAnalogIns(_object):
    """Proxy of C++ std::vector<(p.libm2k::analog::M2kAnalogIn)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kAnalogIns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kAnalogIns, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(M2kAnalogIns self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(M2kAnalogIns self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns___nonzero__(self)


    def __bool__(self):
        """
        __bool__(M2kAnalogIns self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns___bool__(self)


    def __len__(self):
        """
        __len__(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type j) -> M2kAnalogIns

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type

        """
        return _libm2k.M2kAnalogIns___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type

        __setslice__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type j, M2kAnalogIns v)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        v: std::vector< libm2k::analog::M2kAnalogIn *,std::allocator< libm2k::analog::M2kAnalogIn * > > const &

        """
        return _libm2k.M2kAnalogIns___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type

        """
        return _libm2k.M2kAnalogIns___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type

        __delitem__(M2kAnalogIns self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.M2kAnalogIns___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(M2kAnalogIns self, PySliceObject * slice) -> M2kAnalogIns

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i) -> M2kAnalogIn

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type

        """
        return _libm2k.M2kAnalogIns___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(M2kAnalogIns self, PySliceObject * slice, M2kAnalogIns v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::analog::M2kAnalogIn *,std::allocator< libm2k::analog::M2kAnalogIn * > > const &

        __setitem__(M2kAnalogIns self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::difference_type i, M2kAnalogIn x)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogIn * >::difference_type
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns___setitem__(self, *args)


    def pop(self):
        """
        pop(M2kAnalogIns self) -> M2kAnalogIn

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_pop(self)


    def append(self, x):
        """
        append(M2kAnalogIns self, M2kAnalogIn x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns_append(self, x)


    def empty(self):
        """
        empty(M2kAnalogIns self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_empty(self)


    def size(self):
        """
        size(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_size(self)


    def swap(self, v):
        """
        swap(M2kAnalogIns self, M2kAnalogIns v)

        Parameters
        ----------
        v: std::vector< libm2k::analog::M2kAnalogIn * > &

        """
        return _libm2k.M2kAnalogIns_swap(self, v)


    def begin(self):
        """
        begin(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_begin(self)


    def end(self):
        """
        end(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_end(self)


    def rbegin(self):
        """
        rbegin(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_rbegin(self)


    def rend(self):
        """
        rend(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_rend(self)


    def clear(self):
        """
        clear(M2kAnalogIns self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_clear(self)


    def get_allocator(self):
        """
        get_allocator(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_get_allocator(self)


    def pop_back(self):
        """
        pop_back(M2kAnalogIns self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > *

        """
        return _libm2k.M2kAnalogIns_pop_back(self)


    def erase(self, *args):
        """
        erase(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::iterator pos) -> std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        erase(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::iterator first, std::vector< libm2k::analog::M2kAnalogIn * >::iterator last) -> std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        Parameters
        ----------
        first: std::vector< libm2k::analog::M2kAnalogIn * >::iterator
        last: std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        """
        return _libm2k.M2kAnalogIns_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.libm2k::analog::M2kAnalogIn)> self) -> M2kAnalogIns
        __init__(std::vector<(p.libm2k::analog::M2kAnalogIn)> self, M2kAnalogIns arg2) -> M2kAnalogIns

        Parameters
        ----------
        arg2: std::vector< libm2k::analog::M2kAnalogIn * > const &

        __init__(std::vector<(p.libm2k::analog::M2kAnalogIn)> self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type size) -> M2kAnalogIns

        Parameters
        ----------
        size: std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        __init__(std::vector<(p.libm2k::analog::M2kAnalogIn)> self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type size, M2kAnalogIn value) -> M2kAnalogIns

        Parameters
        ----------
        size: std::vector< libm2k::analog::M2kAnalogIn * >::size_type
        value: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        this = _libm2k.new_M2kAnalogIns(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(M2kAnalogIns self, M2kAnalogIn x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns_push_back(self, x)


    def front(self):
        """
        front(M2kAnalogIns self) -> M2kAnalogIn

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_front(self)


    def back(self):
        """
        back(M2kAnalogIns self) -> M2kAnalogIn

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_back(self)


    def assign(self, n, x):
        """
        assign(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type n, M2kAnalogIn x)

        Parameters
        ----------
        n: std::vector< libm2k::analog::M2kAnalogIn * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns_assign(self, n, x)


    def resize(self, *args):
        """
        resize(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        resize(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type new_size, M2kAnalogIn x)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::M2kAnalogIn * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns_resize(self, *args)


    def insert(self, *args):
        """
        insert(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::iterator pos, M2kAnalogIn x) -> std::vector< libm2k::analog::M2kAnalogIn * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogIn * >::iterator
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        insert(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::iterator pos, std::vector< libm2k::analog::M2kAnalogIn * >::size_type n, M2kAnalogIn x)

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogIn * >::iterator
        n: std::vector< libm2k::analog::M2kAnalogIn * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogIn * >::value_type

        """
        return _libm2k.M2kAnalogIns_insert(self, *args)


    def reserve(self, n):
        """
        reserve(M2kAnalogIns self, std::vector< libm2k::analog::M2kAnalogIn * >::size_type n)

        Parameters
        ----------
        n: std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        """
        return _libm2k.M2kAnalogIns_reserve(self, n)


    def capacity(self):
        """
        capacity(M2kAnalogIns self) -> std::vector< libm2k::analog::M2kAnalogIn * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogIn * > const *

        """
        return _libm2k.M2kAnalogIns_capacity(self)

    __swig_destroy__ = _libm2k.delete_M2kAnalogIns
    __del__ = lambda self: None
M2kAnalogIns_swigregister = _libm2k.M2kAnalogIns_swigregister
M2kAnalogIns_swigregister(M2kAnalogIns)

class M2kAnalogOuts(_object):
    """Proxy of C++ std::vector<(p.libm2k::analog::M2kAnalogOut)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kAnalogOuts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kAnalogOuts, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(M2kAnalogOuts self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(M2kAnalogOuts self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts___nonzero__(self)


    def __bool__(self):
        """
        __bool__(M2kAnalogOuts self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts___bool__(self)


    def __len__(self):
        """
        __len__(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type j) -> M2kAnalogOuts

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type

        """
        return _libm2k.M2kAnalogOuts___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type

        __setslice__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type j, M2kAnalogOuts v)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        v: std::vector< libm2k::analog::M2kAnalogOut *,std::allocator< libm2k::analog::M2kAnalogOut * > > const &

        """
        return _libm2k.M2kAnalogOuts___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type j)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        j: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type

        """
        return _libm2k.M2kAnalogOuts___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type

        __delitem__(M2kAnalogOuts self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.M2kAnalogOuts___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(M2kAnalogOuts self, PySliceObject * slice) -> M2kAnalogOuts

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i) -> M2kAnalogOut

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type

        """
        return _libm2k.M2kAnalogOuts___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(M2kAnalogOuts self, PySliceObject * slice, M2kAnalogOuts v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::analog::M2kAnalogOut *,std::allocator< libm2k::analog::M2kAnalogOut * > > const &

        __setitem__(M2kAnalogOuts self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::difference_type i, M2kAnalogOut x)

        Parameters
        ----------
        i: std::vector< libm2k::analog::M2kAnalogOut * >::difference_type
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts___setitem__(self, *args)


    def pop(self):
        """
        pop(M2kAnalogOuts self) -> M2kAnalogOut

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_pop(self)


    def append(self, x):
        """
        append(M2kAnalogOuts self, M2kAnalogOut x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts_append(self, x)


    def empty(self):
        """
        empty(M2kAnalogOuts self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_empty(self)


    def size(self):
        """
        size(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_size(self)


    def swap(self, v):
        """
        swap(M2kAnalogOuts self, M2kAnalogOuts v)

        Parameters
        ----------
        v: std::vector< libm2k::analog::M2kAnalogOut * > &

        """
        return _libm2k.M2kAnalogOuts_swap(self, v)


    def begin(self):
        """
        begin(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_begin(self)


    def end(self):
        """
        end(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_end(self)


    def rbegin(self):
        """
        rbegin(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_rbegin(self)


    def rend(self):
        """
        rend(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_rend(self)


    def clear(self):
        """
        clear(M2kAnalogOuts self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_clear(self)


    def get_allocator(self):
        """
        get_allocator(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_get_allocator(self)


    def pop_back(self):
        """
        pop_back(M2kAnalogOuts self)

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > *

        """
        return _libm2k.M2kAnalogOuts_pop_back(self)


    def erase(self, *args):
        """
        erase(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::iterator pos) -> std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        erase(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::iterator first, std::vector< libm2k::analog::M2kAnalogOut * >::iterator last) -> std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        Parameters
        ----------
        first: std::vector< libm2k::analog::M2kAnalogOut * >::iterator
        last: std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        """
        return _libm2k.M2kAnalogOuts_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.libm2k::analog::M2kAnalogOut)> self) -> M2kAnalogOuts
        __init__(std::vector<(p.libm2k::analog::M2kAnalogOut)> self, M2kAnalogOuts arg2) -> M2kAnalogOuts

        Parameters
        ----------
        arg2: std::vector< libm2k::analog::M2kAnalogOut * > const &

        __init__(std::vector<(p.libm2k::analog::M2kAnalogOut)> self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type size) -> M2kAnalogOuts

        Parameters
        ----------
        size: std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        __init__(std::vector<(p.libm2k::analog::M2kAnalogOut)> self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type size, M2kAnalogOut value) -> M2kAnalogOuts

        Parameters
        ----------
        size: std::vector< libm2k::analog::M2kAnalogOut * >::size_type
        value: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        this = _libm2k.new_M2kAnalogOuts(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(M2kAnalogOuts self, M2kAnalogOut x)

        Parameters
        ----------
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts_push_back(self, x)


    def front(self):
        """
        front(M2kAnalogOuts self) -> M2kAnalogOut

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_front(self)


    def back(self):
        """
        back(M2kAnalogOuts self) -> M2kAnalogOut

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_back(self)


    def assign(self, n, x):
        """
        assign(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type n, M2kAnalogOut x)

        Parameters
        ----------
        n: std::vector< libm2k::analog::M2kAnalogOut * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts_assign(self, n, x)


    def resize(self, *args):
        """
        resize(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        resize(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type new_size, M2kAnalogOut x)

        Parameters
        ----------
        new_size: std::vector< libm2k::analog::M2kAnalogOut * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts_resize(self, *args)


    def insert(self, *args):
        """
        insert(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::iterator pos, M2kAnalogOut x) -> std::vector< libm2k::analog::M2kAnalogOut * >::iterator

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogOut * >::iterator
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        insert(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::iterator pos, std::vector< libm2k::analog::M2kAnalogOut * >::size_type n, M2kAnalogOut x)

        Parameters
        ----------
        pos: std::vector< libm2k::analog::M2kAnalogOut * >::iterator
        n: std::vector< libm2k::analog::M2kAnalogOut * >::size_type
        x: std::vector< libm2k::analog::M2kAnalogOut * >::value_type

        """
        return _libm2k.M2kAnalogOuts_insert(self, *args)


    def reserve(self, n):
        """
        reserve(M2kAnalogOuts self, std::vector< libm2k::analog::M2kAnalogOut * >::size_type n)

        Parameters
        ----------
        n: std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        """
        return _libm2k.M2kAnalogOuts_reserve(self, n)


    def capacity(self):
        """
        capacity(M2kAnalogOuts self) -> std::vector< libm2k::analog::M2kAnalogOut * >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::analog::M2kAnalogOut * > const *

        """
        return _libm2k.M2kAnalogOuts_capacity(self)

    __swig_destroy__ = _libm2k.delete_M2kAnalogOuts
    __del__ = lambda self: None
M2kAnalogOuts_swigregister = _libm2k.M2kAnalogOuts_swigregister
M2kAnalogOuts_swigregister(M2kAnalogOuts)

class M2kConditionAnalog(_object):
    """Proxy of C++ std::vector<(libm2k::M2K_TRIGGER_CONDITION_ANALOG)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kConditionAnalog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kConditionAnalog, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(M2kConditionAnalog self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(M2kConditionAnalog self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog___nonzero__(self)


    def __bool__(self):
        """
        __bool__(M2kConditionAnalog self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog___bool__(self)


    def __len__(self):
        """
        __len__(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type j) -> M2kConditionAnalog

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type

        """
        return _libm2k.M2kConditionAnalog___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type

        __setslice__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type j, M2kConditionAnalog v)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG,std::allocator< libm2k::M2K_TRIGGER_CONDITION_ANALOG > > const &

        """
        return _libm2k.M2kConditionAnalog___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type

        """
        return _libm2k.M2kConditionAnalog___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type

        __delitem__(M2kConditionAnalog self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.M2kConditionAnalog___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(M2kConditionAnalog self, PySliceObject * slice) -> M2kConditionAnalog

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type

        """
        return _libm2k.M2kConditionAnalog___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(M2kConditionAnalog self, PySliceObject * slice, M2kConditionAnalog v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG,std::allocator< libm2k::M2K_TRIGGER_CONDITION_ANALOG > > const &

        __setitem__(M2kConditionAnalog self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::difference_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog___setitem__(self, *args)


    def pop(self):
        """
        pop(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_pop(self)


    def append(self, x):
        """
        append(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog_append(self, x)


    def empty(self):
        """
        empty(M2kConditionAnalog self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_empty(self)


    def size(self):
        """
        size(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_size(self)


    def swap(self, v):
        """
        swap(M2kConditionAnalog self, M2kConditionAnalog v)

        Parameters
        ----------
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > &

        """
        return _libm2k.M2kConditionAnalog_swap(self, v)


    def begin(self):
        """
        begin(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_begin(self)


    def end(self):
        """
        end(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_end(self)


    def rbegin(self):
        """
        rbegin(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_rbegin(self)


    def rend(self):
        """
        rend(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_rend(self)


    def clear(self):
        """
        clear(M2kConditionAnalog self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_clear(self)


    def get_allocator(self):
        """
        get_allocator(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_get_allocator(self)


    def pop_back(self):
        """
        pop_back(M2kConditionAnalog self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > *

        """
        return _libm2k.M2kConditionAnalog_pop_back(self)


    def erase(self, *args):
        """
        erase(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator pos) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        erase(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator first, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator last) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        Parameters
        ----------
        first: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator
        last: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        """
        return _libm2k.M2kConditionAnalog_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_ANALOG)> self) -> M2kConditionAnalog
        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_ANALOG)> self, M2kConditionAnalog arg2) -> M2kConditionAnalog

        Parameters
        ----------
        arg2: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const &

        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_ANALOG)> self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type size) -> M2kConditionAnalog

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_ANALOG)> self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type size, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & value) -> M2kConditionAnalog

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type
        value: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        this = _libm2k.new_M2kConditionAnalog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog_push_back(self, x)


    def front(self):
        """
        front(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_front(self)


    def back(self):
        """
        back(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_back(self)


    def assign(self, n, x):
        """
        assign(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog_assign(self, n, x)


    def resize(self, *args):
        """
        resize(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        resize(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type new_size, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog_resize(self, *args)


    def insert(self, *args):
        """
        insert(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        insert(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::iterator
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::value_type const &

        """
        return _libm2k.M2kConditionAnalog_insert(self, *args)


    def reserve(self, n):
        """
        reserve(M2kConditionAnalog self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type n)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        """
        return _libm2k.M2kConditionAnalog_reserve(self, n)


    def capacity(self):
        """
        capacity(M2kConditionAnalog self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_ANALOG >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_ANALOG > const *

        """
        return _libm2k.M2kConditionAnalog_capacity(self)

    __swig_destroy__ = _libm2k.delete_M2kConditionAnalog
    __del__ = lambda self: None
M2kConditionAnalog_swigregister = _libm2k.M2kConditionAnalog_swigregister
M2kConditionAnalog_swigregister(M2kConditionAnalog)

class M2kConditionDigital(_object):
    """Proxy of C++ std::vector<(libm2k::M2K_TRIGGER_CONDITION_DIGITAL)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kConditionDigital, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kConditionDigital, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(M2kConditionDigital self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(M2kConditionDigital self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital___nonzero__(self)


    def __bool__(self):
        """
        __bool__(M2kConditionDigital self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital___bool__(self)


    def __len__(self):
        """
        __len__(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type j) -> M2kConditionDigital

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type

        """
        return _libm2k.M2kConditionDigital___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type

        __setslice__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type j, M2kConditionDigital v)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL,std::allocator< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > > const &

        """
        return _libm2k.M2kConditionDigital___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type

        """
        return _libm2k.M2kConditionDigital___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type

        __delitem__(M2kConditionDigital self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.M2kConditionDigital___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(M2kConditionDigital self, PySliceObject * slice) -> M2kConditionDigital

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type

        """
        return _libm2k.M2kConditionDigital___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(M2kConditionDigital self, PySliceObject * slice, M2kConditionDigital v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL,std::allocator< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > > const &

        __setitem__(M2kConditionDigital self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::difference_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital___setitem__(self, *args)


    def pop(self):
        """
        pop(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_pop(self)


    def append(self, x):
        """
        append(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital_append(self, x)


    def empty(self):
        """
        empty(M2kConditionDigital self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_empty(self)


    def size(self):
        """
        size(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_size(self)


    def swap(self, v):
        """
        swap(M2kConditionDigital self, M2kConditionDigital v)

        Parameters
        ----------
        v: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > &

        """
        return _libm2k.M2kConditionDigital_swap(self, v)


    def begin(self):
        """
        begin(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_begin(self)


    def end(self):
        """
        end(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_end(self)


    def rbegin(self):
        """
        rbegin(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_rbegin(self)


    def rend(self):
        """
        rend(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_rend(self)


    def clear(self):
        """
        clear(M2kConditionDigital self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_clear(self)


    def get_allocator(self):
        """
        get_allocator(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_get_allocator(self)


    def pop_back(self):
        """
        pop_back(M2kConditionDigital self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > *

        """
        return _libm2k.M2kConditionDigital_pop_back(self)


    def erase(self, *args):
        """
        erase(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator pos) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        erase(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator first, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator last) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        Parameters
        ----------
        first: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator
        last: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        """
        return _libm2k.M2kConditionDigital_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_DIGITAL)> self) -> M2kConditionDigital
        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_DIGITAL)> self, M2kConditionDigital arg2) -> M2kConditionDigital

        Parameters
        ----------
        arg2: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const &

        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_DIGITAL)> self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type size) -> M2kConditionDigital

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        __init__(std::vector<(libm2k::M2K_TRIGGER_CONDITION_DIGITAL)> self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type size, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & value) -> M2kConditionDigital

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type
        value: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        this = _libm2k.new_M2kConditionDigital(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital_push_back(self, x)


    def front(self):
        """
        front(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_front(self)


    def back(self):
        """
        back(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_back(self)


    def assign(self, n, x):
        """
        assign(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital_assign(self, n, x)


    def resize(self, *args):
        """
        resize(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        resize(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type new_size, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital_resize(self, *args)


    def insert(self, *args):
        """
        insert(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        insert(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::iterator
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::value_type const &

        """
        return _libm2k.M2kConditionDigital_insert(self, *args)


    def reserve(self, n):
        """
        reserve(M2kConditionDigital self, std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type n)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        """
        return _libm2k.M2kConditionDigital_reserve(self, n)


    def capacity(self):
        """
        capacity(M2kConditionDigital self) -> std::vector< enum libm2k::M2K_TRIGGER_CONDITION_DIGITAL >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_CONDITION_DIGITAL > const *

        """
        return _libm2k.M2kConditionDigital_capacity(self)

    __swig_destroy__ = _libm2k.delete_M2kConditionDigital
    __del__ = lambda self: None
M2kConditionDigital_swigregister = _libm2k.M2kConditionDigital_swigregister
M2kConditionDigital_swigregister(M2kConditionDigital)

class M2kModes(_object):
    """Proxy of C++ std::vector<(libm2k::M2K_TRIGGER_MODE)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M2kModes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M2kModes, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(M2kModes self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(M2kModes self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes___nonzero__(self)


    def __bool__(self):
        """
        __bool__(M2kModes self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes___bool__(self)


    def __len__(self):
        """
        __len__(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type j) -> M2kModes

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type

        """
        return _libm2k.M2kModes___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type

        __setslice__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type j, M2kModes v)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        v: std::vector< libm2k::M2K_TRIGGER_MODE,std::allocator< libm2k::M2K_TRIGGER_MODE > > const &

        """
        return _libm2k.M2kModes___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        j: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type

        """
        return _libm2k.M2kModes___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type

        __delitem__(M2kModes self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.M2kModes___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(M2kModes self, PySliceObject * slice) -> M2kModes

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type

        """
        return _libm2k.M2kModes___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(M2kModes self, PySliceObject * slice, M2kModes v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< libm2k::M2K_TRIGGER_MODE,std::allocator< libm2k::M2K_TRIGGER_MODE > > const &

        __setitem__(M2kModes self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type i, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum libm2k::M2K_TRIGGER_MODE >::difference_type
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes___setitem__(self, *args)


    def pop(self):
        """
        pop(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_pop(self)


    def append(self, x):
        """
        append(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes_append(self, x)


    def empty(self):
        """
        empty(M2kModes self) -> bool

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_empty(self)


    def size(self):
        """
        size(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_size(self)


    def swap(self, v):
        """
        swap(M2kModes self, M2kModes v)

        Parameters
        ----------
        v: std::vector< libm2k::M2K_TRIGGER_MODE > &

        """
        return _libm2k.M2kModes_swap(self, v)


    def begin(self):
        """
        begin(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_begin(self)


    def end(self):
        """
        end(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_end(self)


    def rbegin(self):
        """
        rbegin(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_rbegin(self)


    def rend(self):
        """
        rend(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::reverse_iterator

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_rend(self)


    def clear(self):
        """
        clear(M2kModes self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_clear(self)


    def get_allocator(self):
        """
        get_allocator(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::allocator_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_get_allocator(self)


    def pop_back(self):
        """
        pop_back(M2kModes self)

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > *

        """
        return _libm2k.M2kModes_pop_back(self)


    def erase(self, *args):
        """
        erase(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator pos) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        erase(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator first, std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator last) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        Parameters
        ----------
        first: std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator
        last: std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        """
        return _libm2k.M2kModes_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(libm2k::M2K_TRIGGER_MODE)> self) -> M2kModes
        __init__(std::vector<(libm2k::M2K_TRIGGER_MODE)> self, M2kModes arg2) -> M2kModes

        Parameters
        ----------
        arg2: std::vector< libm2k::M2K_TRIGGER_MODE > const &

        __init__(std::vector<(libm2k::M2K_TRIGGER_MODE)> self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type size) -> M2kModes

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        __init__(std::vector<(libm2k::M2K_TRIGGER_MODE)> self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type size, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & value) -> M2kModes

        Parameters
        ----------
        size: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type
        value: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        this = _libm2k.new_M2kModes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes_push_back(self, x)


    def front(self):
        """
        front(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_front(self)


    def back(self):
        """
        back(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_back(self)


    def assign(self, n, x):
        """
        assign(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes_assign(self, n, x)


    def resize(self, *args):
        """
        resize(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        resize(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type new_size, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes_resize(self, *args)


    def insert(self, *args):
        """
        insert(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        insert(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator pos, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type n, std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum libm2k::M2K_TRIGGER_MODE >::iterator
        n: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type
        x: std::vector< enum libm2k::M2K_TRIGGER_MODE >::value_type const &

        """
        return _libm2k.M2kModes_insert(self, *args)


    def reserve(self, n):
        """
        reserve(M2kModes self, std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type n)

        Parameters
        ----------
        n: std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        """
        return _libm2k.M2kModes_reserve(self, n)


    def capacity(self):
        """
        capacity(M2kModes self) -> std::vector< enum libm2k::M2K_TRIGGER_MODE >::size_type

        Parameters
        ----------
        self: std::vector< libm2k::M2K_TRIGGER_MODE > const *

        """
        return _libm2k.M2kModes_capacity(self)

    __swig_destroy__ = _libm2k.delete_M2kModes
    __del__ = lambda self: None
M2kModes_swigregister = _libm2k.M2kModes_swigregister
M2kModes_swigregister(M2kModes)

class IioBuffers(_object):
    """Proxy of C++ std::vector<(p.struct iio_buffer)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IioBuffers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IioBuffers, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(IioBuffers self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(IioBuffers self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers___nonzero__(self)


    def __bool__(self):
        """
        __bool__(IioBuffers self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers___bool__(self)


    def __len__(self):
        """
        __len__(IioBuffers self) -> std::vector< struct iio_buffer * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i, std::vector< struct iio_buffer * >::difference_type j) -> std::vector< iio_buffer *,std::allocator< iio_buffer * > > *

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type
        j: std::vector< struct iio_buffer * >::difference_type

        """
        return _libm2k.IioBuffers___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i, std::vector< struct iio_buffer * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type
        j: std::vector< struct iio_buffer * >::difference_type

        __setslice__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i, std::vector< struct iio_buffer * >::difference_type j, std::vector< iio_buffer *,std::allocator< iio_buffer * > > const & v)

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type
        j: std::vector< struct iio_buffer * >::difference_type
        v: std::vector< iio_buffer *,std::allocator< iio_buffer * > > const &

        """
        return _libm2k.IioBuffers___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i, std::vector< struct iio_buffer * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type
        j: std::vector< struct iio_buffer * >::difference_type

        """
        return _libm2k.IioBuffers___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i)

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type

        __delitem__(IioBuffers self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.IioBuffers___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IioBuffers self, PySliceObject * slice) -> std::vector< iio_buffer *,std::allocator< iio_buffer * > >

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i) -> std::vector< struct iio_buffer * >::value_type

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type

        """
        return _libm2k.IioBuffers___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IioBuffers self, PySliceObject * slice, std::vector< iio_buffer *,std::allocator< iio_buffer * > > const & v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< iio_buffer *,std::allocator< iio_buffer * > > const &

        __setitem__(IioBuffers self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IioBuffers self, std::vector< struct iio_buffer * >::difference_type i, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        i: std::vector< struct iio_buffer * >::difference_type
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers___setitem__(self, *args)


    def pop(self):
        """
        pop(IioBuffers self) -> std::vector< struct iio_buffer * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_pop(self)


    def append(self, x):
        """
        append(IioBuffers self, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers_append(self, x)


    def empty(self):
        """
        empty(IioBuffers self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_empty(self)


    def size(self):
        """
        size(IioBuffers self) -> std::vector< struct iio_buffer * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_size(self)


    def swap(self, v):
        """
        swap(IioBuffers self, std::vector< iio_buffer * > & v)

        Parameters
        ----------
        v: std::vector< iio_buffer * > &

        """
        return _libm2k.IioBuffers_swap(self, v)


    def begin(self):
        """
        begin(IioBuffers self) -> std::vector< struct iio_buffer * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_begin(self)


    def end(self):
        """
        end(IioBuffers self) -> std::vector< struct iio_buffer * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_end(self)


    def rbegin(self):
        """
        rbegin(IioBuffers self) -> std::vector< struct iio_buffer * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_rbegin(self)


    def rend(self):
        """
        rend(IioBuffers self) -> std::vector< struct iio_buffer * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_rend(self)


    def clear(self):
        """
        clear(IioBuffers self)

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_clear(self)


    def get_allocator(self):
        """
        get_allocator(IioBuffers self) -> std::vector< struct iio_buffer * >::allocator_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_get_allocator(self)


    def pop_back(self):
        """
        pop_back(IioBuffers self)

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > *

        """
        return _libm2k.IioBuffers_pop_back(self)


    def erase(self, *args):
        """
        erase(IioBuffers self, std::vector< struct iio_buffer * >::iterator pos) -> std::vector< struct iio_buffer * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_buffer * >::iterator

        erase(IioBuffers self, std::vector< struct iio_buffer * >::iterator first, std::vector< struct iio_buffer * >::iterator last) -> std::vector< struct iio_buffer * >::iterator

        Parameters
        ----------
        first: std::vector< struct iio_buffer * >::iterator
        last: std::vector< struct iio_buffer * >::iterator

        """
        return _libm2k.IioBuffers_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.struct iio_buffer)> self) -> IioBuffers
        __init__(std::vector<(p.struct iio_buffer)> self, std::vector< iio_buffer * > const & arg2) -> IioBuffers

        Parameters
        ----------
        arg2: std::vector< iio_buffer * > const &

        __init__(std::vector<(p.struct iio_buffer)> self, std::vector< struct iio_buffer * >::size_type size) -> IioBuffers

        Parameters
        ----------
        size: std::vector< struct iio_buffer * >::size_type

        __init__(std::vector<(p.struct iio_buffer)> self, std::vector< struct iio_buffer * >::size_type size, std::vector< struct iio_buffer * >::value_type value) -> IioBuffers

        Parameters
        ----------
        size: std::vector< struct iio_buffer * >::size_type
        value: std::vector< struct iio_buffer * >::value_type

        """
        this = _libm2k.new_IioBuffers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(IioBuffers self, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers_push_back(self, x)


    def front(self):
        """
        front(IioBuffers self) -> std::vector< struct iio_buffer * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_front(self)


    def back(self):
        """
        back(IioBuffers self) -> std::vector< struct iio_buffer * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_back(self)


    def assign(self, n, x):
        """
        assign(IioBuffers self, std::vector< struct iio_buffer * >::size_type n, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        n: std::vector< struct iio_buffer * >::size_type
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IioBuffers self, std::vector< struct iio_buffer * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< struct iio_buffer * >::size_type

        resize(IioBuffers self, std::vector< struct iio_buffer * >::size_type new_size, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        new_size: std::vector< struct iio_buffer * >::size_type
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers_resize(self, *args)


    def insert(self, *args):
        """
        insert(IioBuffers self, std::vector< struct iio_buffer * >::iterator pos, std::vector< struct iio_buffer * >::value_type x) -> std::vector< struct iio_buffer * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_buffer * >::iterator
        x: std::vector< struct iio_buffer * >::value_type

        insert(IioBuffers self, std::vector< struct iio_buffer * >::iterator pos, std::vector< struct iio_buffer * >::size_type n, std::vector< struct iio_buffer * >::value_type x)

        Parameters
        ----------
        pos: std::vector< struct iio_buffer * >::iterator
        n: std::vector< struct iio_buffer * >::size_type
        x: std::vector< struct iio_buffer * >::value_type

        """
        return _libm2k.IioBuffers_insert(self, *args)


    def reserve(self, n):
        """
        reserve(IioBuffers self, std::vector< struct iio_buffer * >::size_type n)

        Parameters
        ----------
        n: std::vector< struct iio_buffer * >::size_type

        """
        return _libm2k.IioBuffers_reserve(self, n)


    def capacity(self):
        """
        capacity(IioBuffers self) -> std::vector< struct iio_buffer * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_buffer * > const *

        """
        return _libm2k.IioBuffers_capacity(self)

    __swig_destroy__ = _libm2k.delete_IioBuffers
    __del__ = lambda self: None
IioBuffers_swigregister = _libm2k.IioBuffers_swigregister
IioBuffers_swigregister(IioBuffers)

class IioChannels(_object):
    """Proxy of C++ std::vector<(p.struct iio_channel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IioChannels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IioChannels, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(IioChannels self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(IioChannels self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels___nonzero__(self)


    def __bool__(self):
        """
        __bool__(IioChannels self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels___bool__(self)


    def __len__(self):
        """
        __len__(IioChannels self) -> std::vector< struct iio_channel * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(IioChannels self, std::vector< struct iio_channel * >::difference_type i, std::vector< struct iio_channel * >::difference_type j) -> std::vector< iio_channel *,std::allocator< iio_channel * > > *

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type
        j: std::vector< struct iio_channel * >::difference_type

        """
        return _libm2k.IioChannels___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IioChannels self, std::vector< struct iio_channel * >::difference_type i, std::vector< struct iio_channel * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type
        j: std::vector< struct iio_channel * >::difference_type

        __setslice__(IioChannels self, std::vector< struct iio_channel * >::difference_type i, std::vector< struct iio_channel * >::difference_type j, std::vector< iio_channel *,std::allocator< iio_channel * > > const & v)

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type
        j: std::vector< struct iio_channel * >::difference_type
        v: std::vector< iio_channel *,std::allocator< iio_channel * > > const &

        """
        return _libm2k.IioChannels___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(IioChannels self, std::vector< struct iio_channel * >::difference_type i, std::vector< struct iio_channel * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type
        j: std::vector< struct iio_channel * >::difference_type

        """
        return _libm2k.IioChannels___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IioChannels self, std::vector< struct iio_channel * >::difference_type i)

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type

        __delitem__(IioChannels self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.IioChannels___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IioChannels self, PySliceObject * slice) -> std::vector< iio_channel *,std::allocator< iio_channel * > >

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IioChannels self, std::vector< struct iio_channel * >::difference_type i) -> std::vector< struct iio_channel * >::value_type

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type

        """
        return _libm2k.IioChannels___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IioChannels self, PySliceObject * slice, std::vector< iio_channel *,std::allocator< iio_channel * > > const & v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< iio_channel *,std::allocator< iio_channel * > > const &

        __setitem__(IioChannels self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IioChannels self, std::vector< struct iio_channel * >::difference_type i, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        i: std::vector< struct iio_channel * >::difference_type
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels___setitem__(self, *args)


    def pop(self):
        """
        pop(IioChannels self) -> std::vector< struct iio_channel * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_pop(self)


    def append(self, x):
        """
        append(IioChannels self, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels_append(self, x)


    def empty(self):
        """
        empty(IioChannels self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_empty(self)


    def size(self):
        """
        size(IioChannels self) -> std::vector< struct iio_channel * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_size(self)


    def swap(self, v):
        """
        swap(IioChannels self, std::vector< iio_channel * > & v)

        Parameters
        ----------
        v: std::vector< iio_channel * > &

        """
        return _libm2k.IioChannels_swap(self, v)


    def begin(self):
        """
        begin(IioChannels self) -> std::vector< struct iio_channel * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_begin(self)


    def end(self):
        """
        end(IioChannels self) -> std::vector< struct iio_channel * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_end(self)


    def rbegin(self):
        """
        rbegin(IioChannels self) -> std::vector< struct iio_channel * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_rbegin(self)


    def rend(self):
        """
        rend(IioChannels self) -> std::vector< struct iio_channel * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_rend(self)


    def clear(self):
        """
        clear(IioChannels self)

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_clear(self)


    def get_allocator(self):
        """
        get_allocator(IioChannels self) -> std::vector< struct iio_channel * >::allocator_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_get_allocator(self)


    def pop_back(self):
        """
        pop_back(IioChannels self)

        Parameters
        ----------
        self: std::vector< struct iio_channel * > *

        """
        return _libm2k.IioChannels_pop_back(self)


    def erase(self, *args):
        """
        erase(IioChannels self, std::vector< struct iio_channel * >::iterator pos) -> std::vector< struct iio_channel * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_channel * >::iterator

        erase(IioChannels self, std::vector< struct iio_channel * >::iterator first, std::vector< struct iio_channel * >::iterator last) -> std::vector< struct iio_channel * >::iterator

        Parameters
        ----------
        first: std::vector< struct iio_channel * >::iterator
        last: std::vector< struct iio_channel * >::iterator

        """
        return _libm2k.IioChannels_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.struct iio_channel)> self) -> IioChannels
        __init__(std::vector<(p.struct iio_channel)> self, std::vector< iio_channel * > const & arg2) -> IioChannels

        Parameters
        ----------
        arg2: std::vector< iio_channel * > const &

        __init__(std::vector<(p.struct iio_channel)> self, std::vector< struct iio_channel * >::size_type size) -> IioChannels

        Parameters
        ----------
        size: std::vector< struct iio_channel * >::size_type

        __init__(std::vector<(p.struct iio_channel)> self, std::vector< struct iio_channel * >::size_type size, std::vector< struct iio_channel * >::value_type value) -> IioChannels

        Parameters
        ----------
        size: std::vector< struct iio_channel * >::size_type
        value: std::vector< struct iio_channel * >::value_type

        """
        this = _libm2k.new_IioChannels(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(IioChannels self, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels_push_back(self, x)


    def front(self):
        """
        front(IioChannels self) -> std::vector< struct iio_channel * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_front(self)


    def back(self):
        """
        back(IioChannels self) -> std::vector< struct iio_channel * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_back(self)


    def assign(self, n, x):
        """
        assign(IioChannels self, std::vector< struct iio_channel * >::size_type n, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        n: std::vector< struct iio_channel * >::size_type
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IioChannels self, std::vector< struct iio_channel * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< struct iio_channel * >::size_type

        resize(IioChannels self, std::vector< struct iio_channel * >::size_type new_size, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        new_size: std::vector< struct iio_channel * >::size_type
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels_resize(self, *args)


    def insert(self, *args):
        """
        insert(IioChannels self, std::vector< struct iio_channel * >::iterator pos, std::vector< struct iio_channel * >::value_type x) -> std::vector< struct iio_channel * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_channel * >::iterator
        x: std::vector< struct iio_channel * >::value_type

        insert(IioChannels self, std::vector< struct iio_channel * >::iterator pos, std::vector< struct iio_channel * >::size_type n, std::vector< struct iio_channel * >::value_type x)

        Parameters
        ----------
        pos: std::vector< struct iio_channel * >::iterator
        n: std::vector< struct iio_channel * >::size_type
        x: std::vector< struct iio_channel * >::value_type

        """
        return _libm2k.IioChannels_insert(self, *args)


    def reserve(self, n):
        """
        reserve(IioChannels self, std::vector< struct iio_channel * >::size_type n)

        Parameters
        ----------
        n: std::vector< struct iio_channel * >::size_type

        """
        return _libm2k.IioChannels_reserve(self, n)


    def capacity(self):
        """
        capacity(IioChannels self) -> std::vector< struct iio_channel * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_channel * > const *

        """
        return _libm2k.IioChannels_capacity(self)

    __swig_destroy__ = _libm2k.delete_IioChannels
    __del__ = lambda self: None
IioChannels_swigregister = _libm2k.IioChannels_swigregister
IioChannels_swigregister(IioChannels)

class IioDevices(_object):
    """Proxy of C++ std::vector<(p.struct iio_device)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IioDevices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IioDevices, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(IioDevices self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(IioDevices self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices___nonzero__(self)


    def __bool__(self):
        """
        __bool__(IioDevices self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices___bool__(self)


    def __len__(self):
        """
        __len__(IioDevices self) -> std::vector< struct iio_device * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(IioDevices self, std::vector< struct iio_device * >::difference_type i, std::vector< struct iio_device * >::difference_type j) -> std::vector< iio_device *,std::allocator< iio_device * > > *

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type
        j: std::vector< struct iio_device * >::difference_type

        """
        return _libm2k.IioDevices___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IioDevices self, std::vector< struct iio_device * >::difference_type i, std::vector< struct iio_device * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type
        j: std::vector< struct iio_device * >::difference_type

        __setslice__(IioDevices self, std::vector< struct iio_device * >::difference_type i, std::vector< struct iio_device * >::difference_type j, std::vector< iio_device *,std::allocator< iio_device * > > const & v)

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type
        j: std::vector< struct iio_device * >::difference_type
        v: std::vector< iio_device *,std::allocator< iio_device * > > const &

        """
        return _libm2k.IioDevices___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(IioDevices self, std::vector< struct iio_device * >::difference_type i, std::vector< struct iio_device * >::difference_type j)

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type
        j: std::vector< struct iio_device * >::difference_type

        """
        return _libm2k.IioDevices___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IioDevices self, std::vector< struct iio_device * >::difference_type i)

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type

        __delitem__(IioDevices self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _libm2k.IioDevices___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IioDevices self, PySliceObject * slice) -> std::vector< iio_device *,std::allocator< iio_device * > >

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IioDevices self, std::vector< struct iio_device * >::difference_type i) -> std::vector< struct iio_device * >::value_type

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type

        """
        return _libm2k.IioDevices___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IioDevices self, PySliceObject * slice, std::vector< iio_device *,std::allocator< iio_device * > > const & v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< iio_device *,std::allocator< iio_device * > > const &

        __setitem__(IioDevices self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IioDevices self, std::vector< struct iio_device * >::difference_type i, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        i: std::vector< struct iio_device * >::difference_type
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices___setitem__(self, *args)


    def pop(self):
        """
        pop(IioDevices self) -> std::vector< struct iio_device * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_pop(self)


    def append(self, x):
        """
        append(IioDevices self, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices_append(self, x)


    def empty(self):
        """
        empty(IioDevices self) -> bool

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_empty(self)


    def size(self):
        """
        size(IioDevices self) -> std::vector< struct iio_device * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_size(self)


    def swap(self, v):
        """
        swap(IioDevices self, std::vector< iio_device * > & v)

        Parameters
        ----------
        v: std::vector< iio_device * > &

        """
        return _libm2k.IioDevices_swap(self, v)


    def begin(self):
        """
        begin(IioDevices self) -> std::vector< struct iio_device * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_begin(self)


    def end(self):
        """
        end(IioDevices self) -> std::vector< struct iio_device * >::iterator

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_end(self)


    def rbegin(self):
        """
        rbegin(IioDevices self) -> std::vector< struct iio_device * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_rbegin(self)


    def rend(self):
        """
        rend(IioDevices self) -> std::vector< struct iio_device * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_rend(self)


    def clear(self):
        """
        clear(IioDevices self)

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_clear(self)


    def get_allocator(self):
        """
        get_allocator(IioDevices self) -> std::vector< struct iio_device * >::allocator_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_get_allocator(self)


    def pop_back(self):
        """
        pop_back(IioDevices self)

        Parameters
        ----------
        self: std::vector< struct iio_device * > *

        """
        return _libm2k.IioDevices_pop_back(self)


    def erase(self, *args):
        """
        erase(IioDevices self, std::vector< struct iio_device * >::iterator pos) -> std::vector< struct iio_device * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_device * >::iterator

        erase(IioDevices self, std::vector< struct iio_device * >::iterator first, std::vector< struct iio_device * >::iterator last) -> std::vector< struct iio_device * >::iterator

        Parameters
        ----------
        first: std::vector< struct iio_device * >::iterator
        last: std::vector< struct iio_device * >::iterator

        """
        return _libm2k.IioDevices_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.struct iio_device)> self) -> IioDevices
        __init__(std::vector<(p.struct iio_device)> self, std::vector< iio_device * > const & arg2) -> IioDevices

        Parameters
        ----------
        arg2: std::vector< iio_device * > const &

        __init__(std::vector<(p.struct iio_device)> self, std::vector< struct iio_device * >::size_type size) -> IioDevices

        Parameters
        ----------
        size: std::vector< struct iio_device * >::size_type

        __init__(std::vector<(p.struct iio_device)> self, std::vector< struct iio_device * >::size_type size, std::vector< struct iio_device * >::value_type value) -> IioDevices

        Parameters
        ----------
        size: std::vector< struct iio_device * >::size_type
        value: std::vector< struct iio_device * >::value_type

        """
        this = _libm2k.new_IioDevices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(IioDevices self, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices_push_back(self, x)


    def front(self):
        """
        front(IioDevices self) -> std::vector< struct iio_device * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_front(self)


    def back(self):
        """
        back(IioDevices self) -> std::vector< struct iio_device * >::value_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_back(self)


    def assign(self, n, x):
        """
        assign(IioDevices self, std::vector< struct iio_device * >::size_type n, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        n: std::vector< struct iio_device * >::size_type
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IioDevices self, std::vector< struct iio_device * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< struct iio_device * >::size_type

        resize(IioDevices self, std::vector< struct iio_device * >::size_type new_size, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        new_size: std::vector< struct iio_device * >::size_type
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices_resize(self, *args)


    def insert(self, *args):
        """
        insert(IioDevices self, std::vector< struct iio_device * >::iterator pos, std::vector< struct iio_device * >::value_type x) -> std::vector< struct iio_device * >::iterator

        Parameters
        ----------
        pos: std::vector< struct iio_device * >::iterator
        x: std::vector< struct iio_device * >::value_type

        insert(IioDevices self, std::vector< struct iio_device * >::iterator pos, std::vector< struct iio_device * >::size_type n, std::vector< struct iio_device * >::value_type x)

        Parameters
        ----------
        pos: std::vector< struct iio_device * >::iterator
        n: std::vector< struct iio_device * >::size_type
        x: std::vector< struct iio_device * >::value_type

        """
        return _libm2k.IioDevices_insert(self, *args)


    def reserve(self, n):
        """
        reserve(IioDevices self, std::vector< struct iio_device * >::size_type n)

        Parameters
        ----------
        n: std::vector< struct iio_device * >::size_type

        """
        return _libm2k.IioDevices_reserve(self, n)


    def capacity(self):
        """
        capacity(IioDevices self) -> std::vector< struct iio_device * >::size_type

        Parameters
        ----------
        self: std::vector< struct iio_device * > const *

        """
        return _libm2k.IioDevices_capacity(self)

    __swig_destroy__ = _libm2k.delete_IioDevices
    __del__ = lambda self: None
IioDevices_swigregister = _libm2k.IioDevices_swigregister
IioDevices_swigregister(IioDevices)

# This file is compatible with both classic and new-style classes.


